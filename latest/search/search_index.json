{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Alchemical Queues Have you got a small web application with a couple users and a database powered by SQLAlchemy? Do you need to run a couple tasks in the background but does it feel like complete overkill to set up a Celery-based system and have to run a broker like Redis or RabbitMQ just for your three automated emails you send per day? Then you are the target audience of Alchemical Queues . Alchemical Queues is a small project that implements safe distributed queues on top of SQLAlchemy. On top of that is an implementation of task queues for which you can run one or more workers. Because it only has one dependency (SQLAlchemy) most likely you are just adding ~300 lines of python to your deployment with no additional external services required.","title":"Welcome to Alchemical Queues"},{"location":"#welcome-to-alchemical-queues","text":"Have you got a small web application with a couple users and a database powered by SQLAlchemy? Do you need to run a couple tasks in the background but does it feel like complete overkill to set up a Celery-based system and have to run a broker like Redis or RabbitMQ just for your three automated emails you send per day? Then you are the target audience of Alchemical Queues . Alchemical Queues is a small project that implements safe distributed queues on top of SQLAlchemy. On top of that is an implementation of task queues for which you can run one or more workers. Because it only has one dependency (SQLAlchemy) most likely you are just adding ~300 lines of python to your deployment with no additional external services required.","title":"Welcome to Alchemical Queues"},{"location":"api/core/AlchemicalEntry/","text":"Bases: Generic [ T ] An entry in a queue. Attributes: Name Type Description entry_id int the identifier of the entry. Guaranteed unique per AlchemicalQueues instance. enqueued_at datetime when the entry was added to the queue. schedule_at datetime | None do not remove the entry from the queue before this time. priority int the priority of the entry. data T the data stored in this entry. Source code in alchemical_queues/main.py 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 class AlchemicalEntry ( Generic [ T ]): \"\"\"An entry in a queue. Attributes: entry_id (int): the identifier of the entry. Guaranteed unique per [AlchemicalQueues][alchemical_queues.AlchemicalQueues] instance. enqueued_at (datetime): when the entry was added to the queue. schedule_at (datetime | None): do not remove the entry from the queue before this time. priority (int): the priority of the entry. data (T): the data stored in this entry. \"\"\" __slots__ = ( \"data\" , \"entry_id\" , \"enqueued_at\" , \"schedule_at\" , \"priority\" ) def __init__ ( self , entry , data : T , ): assert isinstance ( entry . entry_id , int ) self . entry_id : int = entry . entry_id self . enqueued_at : datetime = entry . enqueued_at self . schedule_at : Union [ datetime , None ] = entry . schedule_at self . priority : int = entry . priority self . data : T = data def __repr__ ( self ): return ( f \"< { self . __class__ . __module__ } . { self . __class__ . __name__ } \" f \"entry_id= { self . entry_id } enqueued_at= { self . enqueued_at } \" f \"schedule_at= { self . schedule_at } priority= { self . priority } >\" )","title":"AlchemicalEntry"},{"location":"api/core/AlchemicalQueue/","text":"Bases: Generic [ T ] An Alchemical Queue. It is not intended to be initialized by a user, go through AlchemicalQueues instead. Source code in alchemical_queues/main.pyclass AlchemicalQueue ( Generic [ T ]): \"\"\"An Alchemical Queue. It is not intended to be initialized by a user, go through [AlchemicalQueues][alchemical_queues.AlchemicalQueues] instead.\"\"\" def __init__ ( self , engine : Engine , model , response_model , name : str ): self . _engine = engine self . _model = model self . _response_model = response_model self . _name = name self . _session = sessionmaker ( engine , autocommit = False , autoflush = False , expire_on_commit = False , future = True , ) @property def name ( self ) -> str : \"\"\"The name of the queue\"\"\" return self . _name def put ( self , item : T , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , ) -> \"AlchemicalEntry[T]\" : \"\"\"Put an entry into the AlchemicalQueue Args: item (Any): The item you wish to add to the queue. It must be pickle-able. schedule_at (datetime | None, optional): Earliest timestamp this entry may be popped of the queue. priority (int, optional): Entry priority. Entries are popped of first in order of priority and then in order of adding to the queue. Returns: AlchemicalEntry[T]: The resultant queue entry. \"\"\" entry = self . _model ( enqueued_at = datetime . now (), schedule_at = schedule_at , priority = priority , queue_name = self . _name , data = pickle . dumps ( item ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalEntry ( entry , item ) def get ( self ) -> Union [ \"AlchemicalEntry[T]\" , None ]: \"\"\"Get the highest priority entry out from the queue Returns: (AlchemicalEntry | None): The popped entry, or None if the queue is empty (or nothing is scheduled yet) \"\"\" timestamp = datetime . now () with self . _session () as session : item = ( session . query ( self . _model ) . with_for_update ( of = self . _model , skip_locked = True ) . filter ( self . _model . queue_name == self . _name , or_ ( self . _model . schedule_at == None , # pylint: disable=C0121 self . _model . schedule_at <= timestamp , # type: ignore ), ) . order_by ( self . _model . priority . desc (), self . _model . entry_id . asc ()) # type: ignore . limit ( 1 ) . first () ) if item is None : session . rollback () return None entry = AlchemicalEntry ( item , pickle . loads ( item . data )) session . delete ( item ) session . commit () return entry def qsize ( self ) -> int : \"\"\"Return the approximate size of this queue. Returns: int: Queue size. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . count () ) def empty ( self ) -> bool : \"\"\"Return `True` if the Queue is emtpy, `False` otherwise. More efficient than `qsize() > 0`. Returns: bool: wether the Queue is empty. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . limit ( 1 ) . count () == 0 ) def clear ( self ) -> None : \"\"\"Clear all entries from this queue. Might fail-silent an update call.\"\"\" with self . _session () as session : session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . delete () session . commit () def respond ( self , entry_id : int , response : Any , cleanup_at : Union [ datetime , None ] = None ) -> \"AlchemicalResponse\" : \"\"\"Send a response to a queue entry. Used to implement task queues. Args: entry_id (int): The entry_id you wish to respond to. response (Any): The response data. Must be pickable. cleanup_at (datetime, optional): The optional cleanup timestamp. After this time the response will be removed. By default it is not automatically cleaned up. Returns: AlchemicalResponse: the response as sent. \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) entry = self . _response_model ( entry_id = entry_id , delivered_at = datetime . now (), cleanup_at = cleanup_at , queue_name = self . _name , data = pickle . dumps ( response ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalResponse ( entry , response ) def responses ( self , entry_id : int ) -> List [ \"AlchemicalResponse\" ]: \"\"\"Obtain the response(s) to a specific queue entry. Returns: List[AlchemicalResponse]: A list of responses \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) with self . _session () as session : now = datetime . now () session . query ( self . _response_model ) . where ( self . _response_model . cleanup_at != None , # pylint: disable=C0121 self . _response_model . cleanup_at < now , ) . delete () entries = ( session . query ( self . _response_model ) . where ( self . _response_model . queue_name == self . _name , self . _response_model . entry_id == entry_id , ) . all () ) return [ AlchemicalResponse ( e , pickle . loads ( e . data )) for e in entries ] name () property The name of the queue Source code in alchemical_queues/main.py 180 181 182 183 @property def name ( self ) -> str : \"\"\"The name of the queue\"\"\" return self . _name put ( item , * , schedule_at = None , priority = 0 ) Put an entry into the AlchemicalQueue Parameters: Name Type Description Default item Any The item you wish to add to the queue. It must be pickle-able. required schedule_at datetime | None Earliest timestamp this entry may be popped of the queue. None priority int Entry priority. Entries are popped of first in order of priority and then in order of adding to the queue. 0 Returns: Type Description AlchemicalEntry[T] AlchemicalEntry[T]: The resultant queue entry. Source code in alchemical_queues/main.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def put ( self , item : T , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , ) -> \"AlchemicalEntry[T]\" : \"\"\"Put an entry into the AlchemicalQueue Args: item (Any): The item you wish to add to the queue. It must be pickle-able. schedule_at (datetime | None, optional): Earliest timestamp this entry may be popped of the queue. priority (int, optional): Entry priority. Entries are popped of first in order of priority and then in order of adding to the queue. Returns: AlchemicalEntry[T]: The resultant queue entry. \"\"\" entry = self . _model ( enqueued_at = datetime . now (), schedule_at = schedule_at , priority = priority , queue_name = self . _name , data = pickle . dumps ( item ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalEntry ( entry , item ) get () Get the highest priority entry out from the queue Returns: Type Description AlchemicalEntry | None The popped entry, or None if the queue is empty (or nothing is scheduled yet) Source code in alchemical_queues/main.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def get ( self ) -> Union [ \"AlchemicalEntry[T]\" , None ]: \"\"\"Get the highest priority entry out from the queue Returns: (AlchemicalEntry | None): The popped entry, or None if the queue is empty (or nothing is scheduled yet) \"\"\" timestamp = datetime . now () with self . _session () as session : item = ( session . query ( self . _model ) . with_for_update ( of = self . _model , skip_locked = True ) . filter ( self . _model . queue_name == self . _name , or_ ( self . _model . schedule_at == None , # pylint: disable=C0121 self . _model . schedule_at <= timestamp , # type: ignore ), ) . order_by ( self . _model . priority . desc (), self . _model . entry_id . asc ()) # type: ignore . limit ( 1 ) . first () ) if item is None : session . rollback () return None entry = AlchemicalEntry ( item , pickle . loads ( item . data )) session . delete ( item ) session . commit () return entry qsize () Return the approximate size of this queue. Returns: Name Type Description int int Queue size. Source code in alchemical_queues/main.py 253 254 255 256 257 258 259 260 261 262 263 264 def qsize ( self ) -> int : \"\"\"Return the approximate size of this queue. Returns: int: Queue size. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . count () ) empty () Return True if the Queue is emtpy, False otherwise. More efficient than qsize() > 0 . Returns: Name Type Description bool bool wether the Queue is empty. Source code in alchemical_queues/main.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 def empty ( self ) -> bool : \"\"\"Return `True` if the Queue is emtpy, `False` otherwise. More efficient than `qsize() > 0`. Returns: bool: wether the Queue is empty. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . limit ( 1 ) . count () == 0 ) clear () Clear all entries from this queue. Might fail-silent an update call. Source code in alchemical_queues/main.py 282 283 284 285 286 287 288 289 def clear ( self ) -> None : \"\"\"Clear all entries from this queue. Might fail-silent an update call.\"\"\" with self . _session () as session : session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . delete () session . commit () respond ( entry_id , response , cleanup_at = None ) Send a response to a queue entry. Used to implement task queues. Parameters: Name Type Description Default entry_id int The entry_id you wish to respond to. required response Any The response data. Must be pickable. required cleanup_at datetime The optional cleanup timestamp. After this time the response will be removed. By default it is not automatically cleaned up. None Returns: Name Type Description AlchemicalResponse AlchemicalResponse the response as sent. Source code in alchemical_queues/main.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def respond ( self , entry_id : int , response : Any , cleanup_at : Union [ datetime , None ] = None ) -> \"AlchemicalResponse\" : \"\"\"Send a response to a queue entry. Used to implement task queues. Args: entry_id (int): The entry_id you wish to respond to. response (Any): The response data. Must be pickable. cleanup_at (datetime, optional): The optional cleanup timestamp. After this time the response will be removed. By default it is not automatically cleaned up. Returns: AlchemicalResponse: the response as sent. \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) entry = self . _response_model ( entry_id = entry_id , delivered_at = datetime . now (), cleanup_at = cleanup_at , queue_name = self . _name , data = pickle . dumps ( response ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalResponse ( entry , response ) responses ( entry_id ) Obtain the response(s) to a specific queue entry. Returns: Type Description List [ AlchemicalResponse ] List[AlchemicalResponse]: A list of responses Source code in alchemical_queues/main.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 def responses ( self , entry_id : int ) -> List [ \"AlchemicalResponse\" ]: \"\"\"Obtain the response(s) to a specific queue entry. Returns: List[AlchemicalResponse]: A list of responses \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) with self . _session () as session : now = datetime . now () session . query ( self . _response_model ) . where ( self . _response_model . cleanup_at != None , # pylint: disable=C0121 self . _response_model . cleanup_at < now , ) . delete () entries = ( session . query ( self . _response_model ) . where ( self . _response_model . queue_name == self . _name , self . _response_model . entry_id == entry_id , ) . all () ) return [ AlchemicalResponse ( e , pickle . loads ( e . data )) for e in entries ]","title":"AlchemicalQueue"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.name","text":"The name of the queue Source code in alchemical_queues/main.py 180 181 182 183 @property def name ( self ) -> str : \"\"\"The name of the queue\"\"\" return self . _name","title":"name()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.put","text":"Put an entry into the AlchemicalQueue Parameters: Name Type Description Default item Any The item you wish to add to the queue. It must be pickle-able. required schedule_at datetime | None Earliest timestamp this entry may be popped of the queue. None priority int Entry priority. Entries are popped of first in order of priority and then in order of adding to the queue. 0 Returns: Type Description AlchemicalEntry[T] AlchemicalEntry[T]: The resultant queue entry. Source code in alchemical_queues/main.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def put ( self , item : T , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , ) -> \"AlchemicalEntry[T]\" : \"\"\"Put an entry into the AlchemicalQueue Args: item (Any): The item you wish to add to the queue. It must be pickle-able. schedule_at (datetime | None, optional): Earliest timestamp this entry may be popped of the queue. priority (int, optional): Entry priority. Entries are popped of first in order of priority and then in order of adding to the queue. Returns: AlchemicalEntry[T]: The resultant queue entry. \"\"\" entry = self . _model ( enqueued_at = datetime . now (), schedule_at = schedule_at , priority = priority , queue_name = self . _name , data = pickle . dumps ( item ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalEntry ( entry , item )","title":"put()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.get","text":"Get the highest priority entry out from the queue Returns: Type Description AlchemicalEntry | None The popped entry, or None if the queue is empty (or nothing is scheduled yet) Source code in alchemical_queues/main.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def get ( self ) -> Union [ \"AlchemicalEntry[T]\" , None ]: \"\"\"Get the highest priority entry out from the queue Returns: (AlchemicalEntry | None): The popped entry, or None if the queue is empty (or nothing is scheduled yet) \"\"\" timestamp = datetime . now () with self . _session () as session : item = ( session . query ( self . _model ) . with_for_update ( of = self . _model , skip_locked = True ) . filter ( self . _model . queue_name == self . _name , or_ ( self . _model . schedule_at == None , # pylint: disable=C0121 self . _model . schedule_at <= timestamp , # type: ignore ), ) . order_by ( self . _model . priority . desc (), self . _model . entry_id . asc ()) # type: ignore . limit ( 1 ) . first () ) if item is None : session . rollback () return None entry = AlchemicalEntry ( item , pickle . loads ( item . data )) session . delete ( item ) session . commit () return entry","title":"get()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.qsize","text":"Return the approximate size of this queue. Returns: Name Type Description int int Queue size. Source code in alchemical_queues/main.py 253 254 255 256 257 258 259 260 261 262 263 264 def qsize ( self ) -> int : \"\"\"Return the approximate size of this queue. Returns: int: Queue size. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . count () )","title":"qsize()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.empty","text":"Return True if the Queue is emtpy, False otherwise. More efficient than qsize() > 0 . Returns: Name Type Description bool bool wether the Queue is empty. Source code in alchemical_queues/main.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 def empty ( self ) -> bool : \"\"\"Return `True` if the Queue is emtpy, `False` otherwise. More efficient than `qsize() > 0`. Returns: bool: wether the Queue is empty. \"\"\" with self . _session () as session : return ( session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . limit ( 1 ) . count () == 0 )","title":"empty()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.clear","text":"Clear all entries from this queue. Might fail-silent an update call. Source code in alchemical_queues/main.py 282 283 284 285 286 287 288 289 def clear ( self ) -> None : \"\"\"Clear all entries from this queue. Might fail-silent an update call.\"\"\" with self . _session () as session : session . query ( self . _model ) . where ( self . _model . queue_name == self . _name ) . delete () session . commit ()","title":"clear()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.respond","text":"Send a response to a queue entry. Used to implement task queues. Parameters: Name Type Description Default entry_id int The entry_id you wish to respond to. required response Any The response data. Must be pickable. required cleanup_at datetime The optional cleanup timestamp. After this time the response will be removed. By default it is not automatically cleaned up. None Returns: Name Type Description AlchemicalResponse AlchemicalResponse the response as sent. Source code in alchemical_queues/main.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def respond ( self , entry_id : int , response : Any , cleanup_at : Union [ datetime , None ] = None ) -> \"AlchemicalResponse\" : \"\"\"Send a response to a queue entry. Used to implement task queues. Args: entry_id (int): The entry_id you wish to respond to. response (Any): The response data. Must be pickable. cleanup_at (datetime, optional): The optional cleanup timestamp. After this time the response will be removed. By default it is not automatically cleaned up. Returns: AlchemicalResponse: the response as sent. \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) entry = self . _response_model ( entry_id = entry_id , delivered_at = datetime . now (), cleanup_at = cleanup_at , queue_name = self . _name , data = pickle . dumps ( response ), ) with self . _session () as session : session . add ( entry ) session . commit () return AlchemicalResponse ( entry , response )","title":"respond()"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.responses","text":"Obtain the response(s) to a specific queue entry. Returns: Type Description List [ AlchemicalResponse ] List[AlchemicalResponse]: A list of responses Source code in alchemical_queues/main.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 def responses ( self , entry_id : int ) -> List [ \"AlchemicalResponse\" ]: \"\"\"Obtain the response(s) to a specific queue entry. Returns: List[AlchemicalResponse]: A list of responses \"\"\" if not isinstance ( entry_id , int ): raise TypeError ( f \"entry_id= { entry_id } should be integer\" ) with self . _session () as session : now = datetime . now () session . query ( self . _response_model ) . where ( self . _response_model . cleanup_at != None , # pylint: disable=C0121 self . _response_model . cleanup_at < now , ) . delete () entries = ( session . query ( self . _response_model ) . where ( self . _response_model . queue_name == self . _name , self . _response_model . entry_id == entry_id , ) . all () ) return [ AlchemicalResponse ( e , pickle . loads ( e . data )) for e in entries ]","title":"responses()"},{"location":"api/core/AlchemicalQueues/","text":"The core entrypoint to Alchemical Queues. Source code in alchemical_queues/main.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class AlchemicalQueues : \"\"\"The core entrypoint to Alchemical Queues.\"\"\" def __init__ ( self , engine : Union [ Engine , None ] = None , queue_tablename : str = \"AlchemicalQueue\" , response_tablename : str = \"AlchemicalResult\" , ) -> None : \"\"\"Create the main queue entrypoint object. Args: engine (sqlalchemy.engine.Engine | None): The SQLAlchemy engine you want to use. May be left None and initialized later. queue_tablename (str): The name of the table AlchemicalQueues uses for queues. queue_tablename (str): The name of the table AlchemicalQueues uses for task results. \"\"\" self . _engine = engine self . _get_prepped = False self . _base , self . _qmodel , self . _rmodel = _generate_models ( queue_tablename , response_tablename ) self . _queues : Dict [ str , \"AlchemicalQueue\" ] = {} def set_engine ( self , engine : Engine ) -> None : \"\"\"Set the SQLAlchemy engine post-initialization Args: engine (sqlalchemy.engine.Engine): The SQLAlchemy engine you want to use. Raises: Exception: when the engine was already set. \"\"\" if self . _engine is not None : raise Exception ( \"Cannot set the engine on Alchemical Queues more than once!\" ) self . _engine = engine def create_all ( self ) -> None : \"\"\"Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all().\"\"\" self . _base . metadata . create_all ( self . _engine ) def clear ( self ) -> None : \"\"\"Clear all entries from all queues and task results. Might fail-silent an update call.\"\"\" with Session ( self . _engine ) as session : session . query ( self . _qmodel ) . delete () session . query ( self . _rmodel ) . delete () session . commit () def _prep_engine_for_get_transaction ( self ) -> None : if self . _get_prepped : return if not self . _engine : raise Exception ( \"AlchemicalQueues SQLAlchemy engine was not initialized.\" ) self . _get_prepped = True if self . _engine . driver == \"pysqlite\" : @event . listens_for ( self . _engine , \"begin\" ) def do_begin ( conn ): conn . exec_driver_sql ( \"BEGIN EXCLUSIVE\" ) def get ( self , key : str ) -> \"AlchemicalQueue[Any]\" : \"\"\"Get a Queue instance Args: key (str): The name of the queue you wish to access. Returns: AlchemicalQueue \"\"\" self . _prep_engine_for_get_transaction () assert self . _engine if key not in self . _queues : self . _queues [ key ] = AlchemicalQueue ( self . _engine , self . _qmodel , self . _rmodel , key ) return self . _queues [ key ] def get_typed ( self , key : str , typeof : Type [ T ]) -> \"AlchemicalQueue[T]\" : \"\"\"Get a typed Queue instance Args: key (str): The name of the queue you wish to access. typeof (Type[T]): The type of the queue you wish to use Returns: AlchemicalQueue[T] \"\"\" # pylint: disable=unused-argument return cast ( AlchemicalQueue [ T ], self . get ( key )) __init__ ( engine = None , queue_tablename = 'AlchemicalQueue' , response_tablename = 'AlchemicalResult' ) Create the main queue entrypoint object. Parameters: Name Type Description Default engine sqlalchemy . engine . Engine | None The SQLAlchemy engine you want to use. May be left None and initialized later. None queue_tablename str The name of the table AlchemicalQueues uses for queues. 'AlchemicalQueue' queue_tablename str The name of the table AlchemicalQueues uses for task results. 'AlchemicalQueue' Source code in alchemical_queues/main.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def __init__ ( self , engine : Union [ Engine , None ] = None , queue_tablename : str = \"AlchemicalQueue\" , response_tablename : str = \"AlchemicalResult\" , ) -> None : \"\"\"Create the main queue entrypoint object. Args: engine (sqlalchemy.engine.Engine | None): The SQLAlchemy engine you want to use. May be left None and initialized later. queue_tablename (str): The name of the table AlchemicalQueues uses for queues. queue_tablename (str): The name of the table AlchemicalQueues uses for task results. \"\"\" self . _engine = engine self . _get_prepped = False self . _base , self . _qmodel , self . _rmodel = _generate_models ( queue_tablename , response_tablename ) self . _queues : Dict [ str , \"AlchemicalQueue\" ] = {} set_engine ( engine ) Set the SQLAlchemy engine post-initialization Parameters: Name Type Description Default engine sqlalchemy . engine . Engine The SQLAlchemy engine you want to use. required Raises: Type Description Exception when the engine was already set. Source code in alchemical_queues/main.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def set_engine ( self , engine : Engine ) -> None : \"\"\"Set the SQLAlchemy engine post-initialization Args: engine (sqlalchemy.engine.Engine): The SQLAlchemy engine you want to use. Raises: Exception: when the engine was already set. \"\"\" if self . _engine is not None : raise Exception ( \"Cannot set the engine on Alchemical Queues more than once!\" ) self . _engine = engine create_all () Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all(). Source code in alchemical_queues/main.py 102 103 104 105 def create_all ( self ) -> None : \"\"\"Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all().\"\"\" self . _base . metadata . create_all ( self . _engine ) clear () Clear all entries from all queues and task results. Might fail-silent an update call. Source code in alchemical_queues/main.py 107 108 109 110 111 112 113 def clear ( self ) -> None : \"\"\"Clear all entries from all queues and task results. Might fail-silent an update call.\"\"\" with Session ( self . _engine ) as session : session . query ( self . _qmodel ) . delete () session . query ( self . _rmodel ) . delete () session . commit () get ( key ) Get a Queue instance Parameters: Name Type Description Default key str The name of the queue you wish to access. required Returns: Type Description AlchemicalQueue[Any] AlchemicalQueue Source code in alchemical_queues/main.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def get ( self , key : str ) -> \"AlchemicalQueue[Any]\" : \"\"\"Get a Queue instance Args: key (str): The name of the queue you wish to access. Returns: AlchemicalQueue \"\"\" self . _prep_engine_for_get_transaction () assert self . _engine if key not in self . _queues : self . _queues [ key ] = AlchemicalQueue ( self . _engine , self . _qmodel , self . _rmodel , key ) return self . _queues [ key ] get_typed ( key , typeof ) Get a typed Queue instance Parameters: Name Type Description Default key str The name of the queue you wish to access. required typeof Type [ T ] The type of the queue you wish to use required Returns: Type Description AlchemicalQueue[T] AlchemicalQueue[T] Source code in alchemical_queues/main.py 149 150 151 152 153 154 155 156 157 158 159 160 def get_typed ( self , key : str , typeof : Type [ T ]) -> \"AlchemicalQueue[T]\" : \"\"\"Get a typed Queue instance Args: key (str): The name of the queue you wish to access. typeof (Type[T]): The type of the queue you wish to use Returns: AlchemicalQueue[T] \"\"\" # pylint: disable=unused-argument return cast ( AlchemicalQueue [ T ], self . get ( key ))","title":"AlchemicalQueues"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.__init__","text":"Create the main queue entrypoint object. Parameters: Name Type Description Default engine sqlalchemy . engine . Engine | None The SQLAlchemy engine you want to use. May be left None and initialized later. None queue_tablename str The name of the table AlchemicalQueues uses for queues. 'AlchemicalQueue' queue_tablename str The name of the table AlchemicalQueues uses for task results. 'AlchemicalQueue' Source code in alchemical_queues/main.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def __init__ ( self , engine : Union [ Engine , None ] = None , queue_tablename : str = \"AlchemicalQueue\" , response_tablename : str = \"AlchemicalResult\" , ) -> None : \"\"\"Create the main queue entrypoint object. Args: engine (sqlalchemy.engine.Engine | None): The SQLAlchemy engine you want to use. May be left None and initialized later. queue_tablename (str): The name of the table AlchemicalQueues uses for queues. queue_tablename (str): The name of the table AlchemicalQueues uses for task results. \"\"\" self . _engine = engine self . _get_prepped = False self . _base , self . _qmodel , self . _rmodel = _generate_models ( queue_tablename , response_tablename ) self . _queues : Dict [ str , \"AlchemicalQueue\" ] = {}","title":"__init__()"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.set_engine","text":"Set the SQLAlchemy engine post-initialization Parameters: Name Type Description Default engine sqlalchemy . engine . Engine The SQLAlchemy engine you want to use. required Raises: Type Description Exception when the engine was already set. Source code in alchemical_queues/main.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def set_engine ( self , engine : Engine ) -> None : \"\"\"Set the SQLAlchemy engine post-initialization Args: engine (sqlalchemy.engine.Engine): The SQLAlchemy engine you want to use. Raises: Exception: when the engine was already set. \"\"\" if self . _engine is not None : raise Exception ( \"Cannot set the engine on Alchemical Queues more than once!\" ) self . _engine = engine","title":"set_engine()"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.create_all","text":"Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all(). Source code in alchemical_queues/main.py 102 103 104 105 def create_all ( self ) -> None : \"\"\"Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all().\"\"\" self . _base . metadata . create_all ( self . _engine )","title":"create_all()"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.clear","text":"Clear all entries from all queues and task results. Might fail-silent an update call. Source code in alchemical_queues/main.py 107 108 109 110 111 112 113 def clear ( self ) -> None : \"\"\"Clear all entries from all queues and task results. Might fail-silent an update call.\"\"\" with Session ( self . _engine ) as session : session . query ( self . _qmodel ) . delete () session . query ( self . _rmodel ) . delete () session . commit ()","title":"clear()"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.get","text":"Get a Queue instance Parameters: Name Type Description Default key str The name of the queue you wish to access. required Returns: Type Description AlchemicalQueue[Any] AlchemicalQueue Source code in alchemical_queues/main.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def get ( self , key : str ) -> \"AlchemicalQueue[Any]\" : \"\"\"Get a Queue instance Args: key (str): The name of the queue you wish to access. Returns: AlchemicalQueue \"\"\" self . _prep_engine_for_get_transaction () assert self . _engine if key not in self . _queues : self . _queues [ key ] = AlchemicalQueue ( self . _engine , self . _qmodel , self . _rmodel , key ) return self . _queues [ key ]","title":"get()"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.get_typed","text":"Get a typed Queue instance Parameters: Name Type Description Default key str The name of the queue you wish to access. required typeof Type [ T ] The type of the queue you wish to use required Returns: Type Description AlchemicalQueue[T] AlchemicalQueue[T] Source code in alchemical_queues/main.py 149 150 151 152 153 154 155 156 157 158 159 160 def get_typed ( self , key : str , typeof : Type [ T ]) -> \"AlchemicalQueue[T]\" : \"\"\"Get a typed Queue instance Args: key (str): The name of the queue you wish to access. typeof (Type[T]): The type of the queue you wish to use Returns: AlchemicalQueue[T] \"\"\" # pylint: disable=unused-argument return cast ( AlchemicalQueue [ T ], self . get ( key ))","title":"get_typed()"},{"location":"api/core/AlchemicalResponse/","text":"An response to a queue item. While you can use this as a user, it is probably most useful for the tasks submodule. Attributes: Name Type Description response_id int the identifier of the response. entry_id int the identifier of the associated entry. delivered_at datetime when the response was submitted. cleanup_at datetime | None autoremove this response after this time. data Any Response data. Source code in alchemical_queues/main.py 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 class AlchemicalResponse : \"\"\"An response to a queue item. While you can use this as a user, it is probably most useful for the [tasks][alchemical_queues.tasks] submodule. Attributes: response_id (int): the identifier of the response. entry_id (int): the identifier of the associated entry. delivered_at (datetime): when the response was submitted. cleanup_at (datetime | None): autoremove this response after this time. data (Any): Response data. \"\"\" __slots__ = [ \"data\" , \"entry_id\" , \"response_id\" , \"delivered_at\" , \"cleanup_at\" , ] def __init__ ( self , response , data : T , ): self . response_id = response . response_id self . entry_id = response . entry_id self . delivered_at = response . delivered_at self . cleanup_at = response . cleanup_at self . data = data","title":"AlchemicalResponse"},{"location":"api/tasks/QueuedTask/","text":"Bases: Generic [ RValue ] Represent a task in the queue. Attributes: Name Type Description entry_id int The id of the entry into the queue that contains the task description. Source code in alchemical_queues/tasks/main.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 class QueuedTask ( Generic [ RValue ]): \"\"\"Represent a task in the queue. Attributes: entry_id (int): The id of the entry into the queue that contains the task description. \"\"\" def __init__ ( self , queue : AlchemicalQueue , entry_id : int , name : str ): self . _queue = queue self . entry_id = entry_id self . _name = name @property def result ( self ) -> Union [ RValue , TaskException , None ]: \"\"\"Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed. Returns: RValue: the value you return from the task handler. TaskException: the task failed to execute. None: the task has not completed. \"\"\" responses = self . _queue . responses ( self . entry_id ) if not responses : return None response = responses [ 0 ] data : dict = cast ( dict , response . data ) if \"error\" in data : return TaskException ( data [ \"error\" ]) return cast ( RValue , data . get ( \"result\" )) result () property Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed. Returns: Name Type Description RValue Union [ RValue , TaskException , None] the value you return from the task handler. TaskException Union [ RValue , TaskException , None] the task failed to execute. None Union [ RValue , TaskException , None] the task has not completed. Source code in alchemical_queues/tasks/main.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 @property def result ( self ) -> Union [ RValue , TaskException , None ]: \"\"\"Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed. Returns: RValue: the value you return from the task handler. TaskException: the task failed to execute. None: the task has not completed. \"\"\" responses = self . _queue . responses ( self . entry_id ) if not responses : return None response = responses [ 0 ] data : dict = cast ( dict , response . data ) if \"error\" in data : return TaskException ( data [ \"error\" ]) return cast ( RValue , data . get ( \"result\" ))","title":"QueuedTask"},{"location":"api/tasks/QueuedTask/#alchemical_queues.tasks.main.QueuedTask.result","text":"Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed. Returns: Name Type Description RValue Union [ RValue , TaskException , None] the value you return from the task handler. TaskException Union [ RValue , TaskException , None] the task failed to execute. None Union [ RValue , TaskException , None] the task has not completed. Source code in alchemical_queues/tasks/main.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 @property def result ( self ) -> Union [ RValue , TaskException , None ]: \"\"\"Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed. Returns: RValue: the value you return from the task handler. TaskException: the task failed to execute. None: the task has not completed. \"\"\" responses = self . _queue . responses ( self . entry_id ) if not responses : return None response = responses [ 0 ] data : dict = cast ( dict , response . data ) if \"error\" in data : return TaskException ( data [ \"error\" ]) return cast ( RValue , data . get ( \"result\" ))","title":"result()"},{"location":"api/tasks/Task/","text":"Bases: Generic [ Param , RValue ] Represent a task that is not yet queued to be executed. It is not constructed by the user, but it is returned when calling a task function. Source code in alchemical_queues/tasks/main.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 class Task ( Generic [ Param , RValue ]): \"\"\"Represent a task that is not yet queued to be executed. It is not constructed by the user, but it is returned when calling a task function.\"\"\" def __init__ ( self , handler : Callable [ Concatenate [ TaskInfo , Param ], RValue ], * args : Param . args , ** kwargs : Param . kwargs , ): self . _handler = handler self . _args = args self . _kwargs = kwargs def schedule ( self , on_queue : AlchemicalQueue , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , max_retries : int = 0 , retry_in : Union [ timedelta , None ] = None , ) -> QueuedTask [ RValue ]: \"\"\"Schedule a task on a queue to be executed. Args: on_queue (AlchemicalQueue): the queue used as task queue. You are expected to run a worker connected to this queue. schedule_at (datetime, optional): do not run the task before this time. priority (int, optional): the task priority, using normal priority queue semantics. max_retries (int, optional): how many times the task should be retried before reporting failure. retry_in (timedelta, optional): the minimal timespan between two tries. \"\"\" name = f \" { self . _handler . __module__ } . { self . _handler . __qualname__ } \" entry = on_queue . put ( { \"function\" : name , \"args\" : self . _args , \"kwargs\" : self . _kwargs , \"retries\" : 0 , \"retry_in\" : retry_in , \"max_retries\" : max_retries , }, schedule_at = schedule_at , priority = priority , ) return QueuedTask ( queue = on_queue , entry_id = entry . entry_id , name = name ) schedule ( on_queue , * , schedule_at = None , priority = 0 , max_retries = 0 , retry_in = None ) Schedule a task on a queue to be executed. Parameters: Name Type Description Default on_queue AlchemicalQueue the queue used as task queue. You are expected to run a worker connected to this queue. required schedule_at datetime do not run the task before this time. None priority int the task priority, using normal priority queue semantics. 0 max_retries int how many times the task should be retried before reporting failure. 0 retry_in timedelta the minimal timespan between two tries. None Source code in alchemical_queues/tasks/main.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 def schedule ( self , on_queue : AlchemicalQueue , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , max_retries : int = 0 , retry_in : Union [ timedelta , None ] = None , ) -> QueuedTask [ RValue ]: \"\"\"Schedule a task on a queue to be executed. Args: on_queue (AlchemicalQueue): the queue used as task queue. You are expected to run a worker connected to this queue. schedule_at (datetime, optional): do not run the task before this time. priority (int, optional): the task priority, using normal priority queue semantics. max_retries (int, optional): how many times the task should be retried before reporting failure. retry_in (timedelta, optional): the minimal timespan between two tries. \"\"\" name = f \" { self . _handler . __module__ } . { self . _handler . __qualname__ } \" entry = on_queue . put ( { \"function\" : name , \"args\" : self . _args , \"kwargs\" : self . _kwargs , \"retries\" : 0 , \"retry_in\" : retry_in , \"max_retries\" : max_retries , }, schedule_at = schedule_at , priority = priority , ) return QueuedTask ( queue = on_queue , entry_id = entry . entry_id , name = name )","title":"Task"},{"location":"api/tasks/Task/#alchemical_queues.tasks.main.Task.schedule","text":"Schedule a task on a queue to be executed. Parameters: Name Type Description Default on_queue AlchemicalQueue the queue used as task queue. You are expected to run a worker connected to this queue. required schedule_at datetime do not run the task before this time. None priority int the task priority, using normal priority queue semantics. 0 max_retries int how many times the task should be retried before reporting failure. 0 retry_in timedelta the minimal timespan between two tries. None Source code in alchemical_queues/tasks/main.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 def schedule ( self , on_queue : AlchemicalQueue , * , schedule_at : Union [ datetime , None ] = None , priority : int = 0 , max_retries : int = 0 , retry_in : Union [ timedelta , None ] = None , ) -> QueuedTask [ RValue ]: \"\"\"Schedule a task on a queue to be executed. Args: on_queue (AlchemicalQueue): the queue used as task queue. You are expected to run a worker connected to this queue. schedule_at (datetime, optional): do not run the task before this time. priority (int, optional): the task priority, using normal priority queue semantics. max_retries (int, optional): how many times the task should be retried before reporting failure. retry_in (timedelta, optional): the minimal timespan between two tries. \"\"\" name = f \" { self . _handler . __module__ } . { self . _handler . __qualname__ } \" entry = on_queue . put ( { \"function\" : name , \"args\" : self . _args , \"kwargs\" : self . _kwargs , \"retries\" : 0 , \"retry_in\" : retry_in , \"max_retries\" : max_retries , }, schedule_at = schedule_at , priority = priority , ) return QueuedTask ( queue = on_queue , entry_id = entry . entry_id , name = name )","title":"schedule()"},{"location":"api/tasks/TaskException/","text":"Represent a failed task. Attributes: Name Type Description msg str Stringified exception Source code in alchemical_queues/tasks/main.py 141 142 143 144 145 146 147 148 149 150 151 class TaskException : \"\"\"Represent a failed task. Attributes: msg (str): Stringified exception \"\"\" __slots__ = [ \"msg\" ] def __init__ ( self , msg : str ) -> None : self . msg : str = msg","title":"TaskException"},{"location":"api/tasks/TaskInfo/","text":"Meta description of the current task, as passed to task worker functions. Source code in alchemical_queues/tasks/main.py 12 13 14 15 16 17 18 19 20 class TaskInfo : \"\"\"Meta description of the current task, as passed to task worker functions.\"\"\" __slots__ = [ \"entry_id\" , \"retries\" , \"max_retries\" ] def __init__ ( self , entry_id : int , retries : int , max_retries : int ) -> None : self . entry_id = entry_id self . retries = retries self . max_retries = max_retries","title":"TaskInfo"},{"location":"api/tasks/Worker/","text":"Worker implementation that can take tasks from queues and execute them. Attributes: Name Type Description queue AlchemicalQueue the queue this worker runs on poll_every timedelta how often to poll for new tasks Source code in alchemical_queues/tasks/main.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class Worker : \"\"\"Worker implementation that can take tasks from queues and execute them. Attributes: queue (AlchemicalQueue): the queue this worker runs on poll_every (timedelta): how often to poll for new tasks \"\"\" def __init__ ( self , queue : AlchemicalQueue , poll_every : timedelta = timedelta ( seconds = 1 ) ): self . queue = queue self . poll_every : timedelta = poll_every self . _handler_registry : Dict [ str , \"Tasker\" ] = {} self . _logger = getLogger ( \"alchemical_queues.tasks\" ) def _fail ( self , entry_id : int , data : Dict [ str , Any ], exception : Union [ BaseException , None ] = None , fatal : bool = False , ): retries = data [ \"retries\" ] if data . get ( \"max_retries\" , 0 ) > retries and not fatal : data [ \"retries\" ] = retries + 1 retry_at = datetime . now () if data [ \"retry_in\" ] is not None : retry_at += data [ \"retry_in\" ] data [ \"entry_id\" ] = entry_id new_entry = self . queue . put ( data , schedule_at = retry_at ) self . _logger . info ( \"Retrying failed task %s as ` %s `\" , entry_id , new_entry . entry_id ) return False self . _logger . warning ( \"Failed to perform task %s \" , entry_id ) self . _logger . exception ( exception ) self . queue . respond ( entry_id , { \"error\" : str ( exception )}) return False def _perform ( self , task_entry : AlchemicalEntry ): data = task_entry . data entry_id = task_entry . data . get ( \"entry_id\" ) or task_entry . entry_id function_path = data [ \"function\" ] task_handler = self . _handler_registry . get ( function_path ) if function_path not in self . _handler_registry : task_handler = self . _handler_registry [ function_path ] = cast ( Tasker , locate ( function_path ) ) if task_handler is None : return self . _fail ( entry_id , data , KeyError ( f \"AlchemicalEntry handler ` { function_path } ` not found.\" , ), fatal = True , ) try : self . _logger . info ( \"Running task ` %s `.\" , task_entry . entry_id ) func = task_handler . get_handler () result = func ( TaskInfo ( task_entry . entry_id , data [ \"retries\" ], data [ \"max_retries\" ]), * data [ \"args\" ], ** data [ \"kwargs\" ], ) self . queue . respond ( entry_id , { \"result\" : result }) return True except KeyboardInterrupt as interrupt : # Allow cancellation via interrupt signal raise interrupt except Exception as error : # pylint: disable=broad-except return self . _fail ( entry_id , data , error ) def work ( self ) -> NoReturn : \"\"\"Run tasks forever.\"\"\" self . _logger . info ( \"Worker starting on queue ` %s `.\" , self . queue . name ) while True : task_entry = self . queue . get () if task_entry is None : time . sleep ( self . poll_every . total_seconds ()) else : self . _perform ( task_entry ) def work_one ( self , block : bool = True ) -> None : \"\"\"Run exactly one task. Args: block (bool): wether to block until a task is available, or exit immediately if not is available. \"\"\" while True : task_entry = self . queue . get () if task_entry is not None : self . _perform ( task_entry ) return if block : time . sleep ( self . poll_every . total_seconds ()) else : break work () Run tasks forever. Source code in alchemical_queues/tasks/main.py 109 110 111 112 113 114 115 116 117 118 119 def work ( self ) -> NoReturn : \"\"\"Run tasks forever.\"\"\" self . _logger . info ( \"Worker starting on queue ` %s `.\" , self . queue . name ) while True : task_entry = self . queue . get () if task_entry is None : time . sleep ( self . poll_every . total_seconds ()) else : self . _perform ( task_entry ) work_one ( block = True ) Run exactly one task. Parameters: Name Type Description Default block bool wether to block until a task is available, or exit immediately if not is available. True Source code in alchemical_queues/tasks/main.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def work_one ( self , block : bool = True ) -> None : \"\"\"Run exactly one task. Args: block (bool): wether to block until a task is available, or exit immediately if not is available. \"\"\" while True : task_entry = self . queue . get () if task_entry is not None : self . _perform ( task_entry ) return if block : time . sleep ( self . poll_every . total_seconds ()) else : break","title":"Worker"},{"location":"api/tasks/Worker/#alchemical_queues.tasks.main.Worker.work","text":"Run tasks forever. Source code in alchemical_queues/tasks/main.py 109 110 111 112 113 114 115 116 117 118 119 def work ( self ) -> NoReturn : \"\"\"Run tasks forever.\"\"\" self . _logger . info ( \"Worker starting on queue ` %s `.\" , self . queue . name ) while True : task_entry = self . queue . get () if task_entry is None : time . sleep ( self . poll_every . total_seconds ()) else : self . _perform ( task_entry )","title":"work()"},{"location":"api/tasks/Worker/#alchemical_queues.tasks.main.Worker.work_one","text":"Run exactly one task. Parameters: Name Type Description Default block bool wether to block until a task is available, or exit immediately if not is available. True Source code in alchemical_queues/tasks/main.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def work_one ( self , block : bool = True ) -> None : \"\"\"Run exactly one task. Args: block (bool): wether to block until a task is available, or exit immediately if not is available. \"\"\" while True : task_entry = self . queue . get () if task_entry is not None : self . _perform ( task_entry ) return if block : time . sleep ( self . poll_every . total_seconds ()) else : break","title":"work_one()"},{"location":"api/tasks/task/","text":"Decorator to turn a function into a runnable task. Parameters: Name Type Description Default function Callable Any function you want to run as task. It should take a TaskInfo as first argument. required Source code in alchemical_queues/tasks/main.py 264 265 266 267 268 269 270 271 272 273 def task ( function : Callable [ Concatenate [ TaskInfo , Param ], RValue ] ) -> Tasker [ Param , RValue ]: \"\"\"Decorator to turn a function into a runnable task. Args: function (Callable): Any function you want to run as task. It should take a [TaskInfo][alchemical_queues.tasks.TaskInfo] as first argument.\"\"\" return Tasker [ Param , RValue ]( function )","title":"task"},{"location":"development/contributing/","text":"Contributing to Alchemical Queues First off, thanks for taking the time to contribute! \u2764\ufe0f All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89 And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's readme - Mention the project at local meetups and tell your friends/colleagues Table of Contents Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Suggesting Enhancements Your First Code Contribution Format your code with black Rate your code style using pylint Type-check your code with mypy Run the testsuite with pytest Attribution Code of Conduct This project and everyone participating in it is governed by the Alchemical Queues Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to open-source@tmiedema.com . I Have a Question If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant. We will then take care of the issue as soon as possible. I Want To Contribute Legal Notice When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license (MIT). Reporting Bugs Before Submitting a Bug Report A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section ). To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions? How Do I Submit a Good Bug Report? You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to open-source@tmiedema.com . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked needs-fix , as well as possibly other tags (such as critical ), and the issue will be left to be implemented by someone . Suggesting Enhancements This section guides you through submitting an enhancement suggestion for Alchemical Queues, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions. Before Submitting an Enhancement Make sure that you are using the latest version. Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library. How Do I Submit a Good Enhancement Suggestion? Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. Explain why this enhancement would be useful to most Alchemical Queues users. You may also want to point out the other projects that solved it better and which could serve as inspiration. Your First Code Contribution So you've decided to contribute some code to Alchemical Queues! Here a couple quick steps to get your environment up and running. The environment used for Alchemical Queues is managed by poetry , a very useful tool that makes setting up the same environment every time a breeze. Install it easily via pip: $ pip install poetry Now you can clone the github repository (maybe make a fork first) and install the dependencies. $ git clone https://github.com/thijsmie/alchemical_queues $ cd alchemical_queues $ poetry install You can now make a change somewhere. For the sake of argument, lets just say you add a quick print(\"Hi!\") somewhere in the code. Before you contribute this change back to the project you'll need to perform a couple steps: Format your code with black Alchemical Queues is formatted using black , a zero-config code formatter. Run it like so: $ poetry run black src/ Rate your code style using pylint To make sure there aren't any unused imports, non-descriptive variable names or other such \"code smells\" you can run pylint . $ poetry run pylint src/alchemical_queues/ Preferably, the rating should stay '10.0', unless there is a compelling reason not to. Type-check your code with mypy Type hints are an important way to communicate to the user how the Alchemical Queues API works. Use mypy to check it: $ poetry run mypy . Run the testsuite with pytest Testing is important, and it helps you to not accidentally break the code. We test using pytest . It also gives some feedback on coverage , which counts how many lines of your code are actually tested. $ poetry run pytest --cov = src . $ poetry run coverage report Attribution This guide is based on the contributing-gen . Make your own !","title":"Contributing"},{"location":"development/contributing/#contributing-to-alchemical-queues","text":"First off, thanks for taking the time to contribute! \u2764\ufe0f All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89 And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's readme - Mention the project at local meetups and tell your friends/colleagues","title":"Contributing to Alchemical Queues"},{"location":"development/contributing/#table-of-contents","text":"Code of Conduct I Have a Question I Want To Contribute Reporting Bugs Suggesting Enhancements Your First Code Contribution Format your code with black Rate your code style using pylint Type-check your code with mypy Run the testsuite with pytest Attribution","title":"Table of Contents"},{"location":"development/contributing/#code-of-conduct","text":"This project and everyone participating in it is governed by the Alchemical Queues Code of Conduct . By participating, you are expected to uphold this code. Please report unacceptable behavior to open-source@tmiedema.com .","title":"Code of Conduct"},{"location":"development/contributing/#i-have-a-question","text":"If you want to ask a question, we assume that you have read the available Documentation . Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first. If you then still feel the need to ask a question and need clarification, we recommend the following: Open an Issue . Provide as much context as you can about what you're running into. Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant. We will then take care of the issue as soon as possible.","title":"I Have a Question"},{"location":"development/contributing/#i-want-to-contribute","text":"","title":"I Want To Contribute"},{"location":"development/contributing/#legal-notice","text":"When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license (MIT).","title":"Legal Notice "},{"location":"development/contributing/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"development/contributing/#before-submitting-a-bug-report","text":"A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible. Make sure that you are using the latest version. Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation . If you are looking for support, you might want to check this section ). To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker . Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue. Collect information about the bug: Stack trace (Traceback) OS, Platform and Version (Windows, Linux, macOS, x86, ARM) Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant. Possibly your input and the output Can you reliably reproduce the issue? And can you also reproduce it with older versions?","title":"Before Submitting a Bug Report"},{"location":"development/contributing/#how-do-i-submit-a-good-bug-report","text":"You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to open-source@tmiedema.com . We use GitHub issues to track bugs and errors. If you run into an issue with the project: Open an Issue . (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.) Explain the behavior you would expect and the actual behavior. Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case. Provide the information you collected in the previous section. Once it's filed: The project team will label the issue accordingly. A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as needs-repro . Bugs with the needs-repro tag will not be addressed until they are reproduced. If the team is able to reproduce the issue, it will be marked needs-fix , as well as possibly other tags (such as critical ), and the issue will be left to be implemented by someone .","title":"How Do I Submit a Good Bug Report?"},{"location":"development/contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion for Alchemical Queues, including completely new features and minor improvements to existing functionality . Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.","title":"Suggesting Enhancements"},{"location":"development/contributing/#before-submitting-an-enhancement","text":"Make sure that you are using the latest version. Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration. Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one. Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.","title":"Before Submitting an Enhancement"},{"location":"development/contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues . Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you. Explain why this enhancement would be useful to most Alchemical Queues users. You may also want to point out the other projects that solved it better and which could serve as inspiration.","title":"How Do I Submit a Good Enhancement Suggestion?"},{"location":"development/contributing/#your-first-code-contribution","text":"So you've decided to contribute some code to Alchemical Queues! Here a couple quick steps to get your environment up and running. The environment used for Alchemical Queues is managed by poetry , a very useful tool that makes setting up the same environment every time a breeze. Install it easily via pip: $ pip install poetry Now you can clone the github repository (maybe make a fork first) and install the dependencies. $ git clone https://github.com/thijsmie/alchemical_queues $ cd alchemical_queues $ poetry install You can now make a change somewhere. For the sake of argument, lets just say you add a quick print(\"Hi!\") somewhere in the code. Before you contribute this change back to the project you'll need to perform a couple steps:","title":"Your First Code Contribution"},{"location":"development/contributing/#format-your-code-with-black","text":"Alchemical Queues is formatted using black , a zero-config code formatter. Run it like so: $ poetry run black src/","title":"Format your code with black"},{"location":"development/contributing/#rate-your-code-style-using-pylint","text":"To make sure there aren't any unused imports, non-descriptive variable names or other such \"code smells\" you can run pylint . $ poetry run pylint src/alchemical_queues/ Preferably, the rating should stay '10.0', unless there is a compelling reason not to.","title":"Rate your code style using pylint"},{"location":"development/contributing/#type-check-your-code-with-mypy","text":"Type hints are an important way to communicate to the user how the Alchemical Queues API works. Use mypy to check it: $ poetry run mypy .","title":"Type-check your code with mypy"},{"location":"development/contributing/#run-the-testsuite-with-pytest","text":"Testing is important, and it helps you to not accidentally break the code. We test using pytest . It also gives some feedback on coverage , which counts how many lines of your code are actually tested. $ poetry run pytest --cov = src . $ poetry run coverage report","title":"Run the testsuite with pytest"},{"location":"development/contributing/#attribution","text":"This guide is based on the contributing-gen . Make your own !","title":"Attribution"},{"location":"development/postgres/","text":"Testing against Postgres Running against postgres locally with a postgres docker docker run --name postgres -e POSTGRES_USER = postgres -e POSTGRES_PASSWORD = postgres -e POSTGRES_DB = aq_db -p 5455 :5432 postgres:latest export postgres_ip = ` docker inspect -f '\\{\\{range.NetworkSettings.Networks\\}\\}\\{\\{.IPAddress\\}\\}\\{\\{end\\}\\}' postgres ` pytest -x --engine \"postgresql+psycopg2://postgres:postgres@ ${ postgres_ip } /aq_db\"","title":"Testing against Postgres"},{"location":"development/postgres/#testing-against-postgres","text":"Running against postgres locally with a postgres docker docker run --name postgres -e POSTGRES_USER = postgres -e POSTGRES_PASSWORD = postgres -e POSTGRES_DB = aq_db -p 5455 :5432 postgres:latest export postgres_ip = ` docker inspect -f '\\{\\{range.NetworkSettings.Networks\\}\\}\\{\\{.IPAddress\\}\\}\\{\\{end\\}\\}' postgres ` pytest -x --engine \"postgresql+psycopg2://postgres:postgres@ ${ postgres_ip } /aq_db\"","title":"Testing against Postgres"},{"location":"usage/advanced/","text":"Extra functionality Alchemical Queues has a couple extra functionalities that you can combine to build your system. Priority queues In reality, all Alchemical Queues are priority queues, just all normal items you insert have priority 0. queue = queues . get ( \"priority-queue\" ) queue . put ( 42 , priority = 12 ) queue . put ( 137 , priority = 13 ) queue . put ( 0 ) print ( queue . get () . data ) # prints 137 print ( queue . get () . data ) # prints 42 print ( queue . get () . data ) # prints 0 This argument also applies to the schedule method for tasks. add_numbers ( 1 , 2 ) . schedule ( queue , priority = 12 ) Scheduling When putting things into the queue you can pass a schedule_at argument. These entries can not be popped off the queue before the schedule_at time. import time from datetime import datetime , timedelta now = datetime . now () queue = queues . get ( \"schedule-queue\" ) queue . put ( 42 , schedule_at = now + timedelta ( seconds = 1 )) print ( queue . get ()) # will print None time . sleep ( 1.0 ) print ( queue . get () . data ) # will print 42 This argument also applies to the schedule method for tasks. add_numbers ( 1 , 2 ) . schedule ( queue , schedule_at = now + timedelta ( seconds = 30 )) Custom tables If you don't want to use the default AlchemicalQueue and AlchemicalResponse tables you can configure them. queues = AlchemicalQueues ( queue_tablename = \"queues\" , response_tablename = \"responses\" ) When you use alchemical_worker it will use the default names. You can run the worker via python on your custom queues. from alchemical_queues.tasks import Worker Worker ( queues . get ( \"task-queue\" )) . work ()","title":"Extra functionality"},{"location":"usage/advanced/#extra-functionality","text":"Alchemical Queues has a couple extra functionalities that you can combine to build your system.","title":"Extra functionality"},{"location":"usage/advanced/#priority-queues","text":"In reality, all Alchemical Queues are priority queues, just all normal items you insert have priority 0. queue = queues . get ( \"priority-queue\" ) queue . put ( 42 , priority = 12 ) queue . put ( 137 , priority = 13 ) queue . put ( 0 ) print ( queue . get () . data ) # prints 137 print ( queue . get () . data ) # prints 42 print ( queue . get () . data ) # prints 0 This argument also applies to the schedule method for tasks. add_numbers ( 1 , 2 ) . schedule ( queue , priority = 12 )","title":"Priority queues"},{"location":"usage/advanced/#scheduling","text":"When putting things into the queue you can pass a schedule_at argument. These entries can not be popped off the queue before the schedule_at time. import time from datetime import datetime , timedelta now = datetime . now () queue = queues . get ( \"schedule-queue\" ) queue . put ( 42 , schedule_at = now + timedelta ( seconds = 1 )) print ( queue . get ()) # will print None time . sleep ( 1.0 ) print ( queue . get () . data ) # will print 42 This argument also applies to the schedule method for tasks. add_numbers ( 1 , 2 ) . schedule ( queue , schedule_at = now + timedelta ( seconds = 30 ))","title":"Scheduling"},{"location":"usage/advanced/#custom-tables","text":"If you don't want to use the default AlchemicalQueue and AlchemicalResponse tables you can configure them. queues = AlchemicalQueues ( queue_tablename = \"queues\" , response_tablename = \"responses\" ) When you use alchemical_worker it will use the default names. You can run the worker via python on your custom queues. from alchemical_queues.tasks import Worker Worker ( queues . get ( \"task-queue\" )) . work ()","title":"Custom tables"},{"location":"usage/flask_example/","text":"Flask-SQLAlchemy example This is a quick example of how to use alchemical_queues.tasks in a Flask context. We'll use the file tasks.py from the main tutorial: from alchemical_queues.tasks import task @task def add_numbers ( taskinfo , a , b ): print ( f \"Running { a } + { b } \" ) return a + b The minimal Flask app looks like this: from flask import Flask from flask_sqlalchemy import SQLAlchemy from alchemical_queues import AlchemicalQueues from tasks import add_numbers db = SQLAlchemy () app = Flask ( __name__ ) app . config [ \"SQLALCHEMY_DATABASE_URI\" ] = \"sqlite:///project.db\" db . init_app ( app ) queues = AlchemicalQueues () with app . app_context (): db . create_all () queues . set_engine ( db . engine ) queues . create_all () @app . route ( \"/<int:a>/<int:b>\" ) def add_some_numbers ( a : int , b : int ): task_queue = queues . get ( \"task-queue\" ) entry = add_numbers ( a , b ) . schedule ( task_queue ) return f \"task: { entry . entry_id } \" @app . route ( \"/result/<int:entry>\" ) def result ( entry : int ): task_queue = queues . get ( \"task-queue\" ) task = add_numbers . retrieve ( task_queue , entry ) if task . result is None : return \"No result yet\" else : return f \"result: { task . result } \" if __name__ == \"__main__\" : app . run () The worker can be run like this: alchemical_worker \"sqlite:///project.db\" task-queue","title":"Flask-SQLAlchemy example"},{"location":"usage/flask_example/#flask-sqlalchemy-example","text":"This is a quick example of how to use alchemical_queues.tasks in a Flask context. We'll use the file tasks.py from the main tutorial: from alchemical_queues.tasks import task @task def add_numbers ( taskinfo , a , b ): print ( f \"Running { a } + { b } \" ) return a + b The minimal Flask app looks like this: from flask import Flask from flask_sqlalchemy import SQLAlchemy from alchemical_queues import AlchemicalQueues from tasks import add_numbers db = SQLAlchemy () app = Flask ( __name__ ) app . config [ \"SQLALCHEMY_DATABASE_URI\" ] = \"sqlite:///project.db\" db . init_app ( app ) queues = AlchemicalQueues () with app . app_context (): db . create_all () queues . set_engine ( db . engine ) queues . create_all () @app . route ( \"/<int:a>/<int:b>\" ) def add_some_numbers ( a : int , b : int ): task_queue = queues . get ( \"task-queue\" ) entry = add_numbers ( a , b ) . schedule ( task_queue ) return f \"task: { entry . entry_id } \" @app . route ( \"/result/<int:entry>\" ) def result ( entry : int ): task_queue = queues . get ( \"task-queue\" ) task = add_numbers . retrieve ( task_queue , entry ) if task . result is None : return \"No result yet\" else : return f \"result: { task . result } \" if __name__ == \"__main__\" : app . run () The worker can be run like this: alchemical_worker \"sqlite:///project.db\" task-queue","title":"Flask-SQLAlchemy example"},{"location":"usage/installation/","text":"Installation You can install Alchemical Queues using pip: pip install alchemical_queues You can also install from source: git clone https://github.com/thijsmie/alchemical_queues cd alchemical_queues pip install . You can also use poetry to set up your development environment and run the tests: git clone https://github.com/thijsmie/alchemical_queues cd alchemical_queues pip install poetry poetry install poetry run pytest","title":"Installation"},{"location":"usage/installation/#installation","text":"You can install Alchemical Queues using pip: pip install alchemical_queues You can also install from source: git clone https://github.com/thijsmie/alchemical_queues cd alchemical_queues pip install . You can also use poetry to set up your development environment and run the tests: git clone https://github.com/thijsmie/alchemical_queues cd alchemical_queues pip install poetry poetry install poetry run pytest","title":"Installation"},{"location":"usage/tutorial/","text":"Tutorial To work with Alchemical Queues you will need a SQLAlchemy Engine which defines the connection to your database. For this tutorial we will use a SQLite database but you can use whatever you already have. from sqlalchemy import create_engine engine = create_engine ( f \"sqlite:///test.db\" ) We can now initialize the Alchemical Queues manager object on this engine. This will initialize some SQLAlchemy metadata on the engine. from alchemical_queues import AlchemicalQueues queues = AlchemicalQueues ( engine ) queues . create_all () If you're used to Flask-SQLAlchemy: queues.create_all is like db.create_all . For the pure SQLAlchemy users, it is like metadata.create_all . It is creating the tables Alchemical Queues uses to store the queues and response data. Queues The Queues in Alchemical Queues are named and distributed. They are thread and interprocess-safe. By being powered by a database and not something \"smarter\" they are not the fastest, but they are as reliable as the database backend powering them. Let's obtain a named AlchemicalQueue and push some data to it: queue = queues . get ( \"test-queue\" ) queue . put ( 42 ) queue . put ( 137 ) We can now run a second script to read back what we put in: print ( queue . get () . data ) # prints 42 print ( queue . get () . data ) # prints 137 Note that entries are returned in the same order as we put them in. The Queue is a so called FIFO Queue: first-in, first-out. Secondly, note that we access the .data attribute of what is returned, and not the data returned directly. Unlike the standard library queue.Queue the items are not returned as-is but have some additional information. What is returned is a AlchemicalEntry which has several other properties. This entry is also returned when you put something into the queue. entry1 = queue . put ( 12 ) entry2 = queue . get () # entry1 and entry2 represent the same entry What types of data are allowed in a Queue? Data you put in a Queue is serialized to bytes using pickle . Any pickle able datatype is allowed. Tasks Implemented on top of AlchemicalQueues is a Task Queue implementation like celery . If you want to have a robust task queue with lots of features I would definitely recommend celery instead. However, alchemical_queues.tasks has the advantage of just needing SQLite to run, thus not requiring any installation of Redis or RabbitMQ or other broker. Running a worker is just another Python script. We first define the task to run as a python function. This task function must be importable by the worker, so for the example put it in a file tasks.py in your working directory. from alchemical_queues.tasks import task @task def add_numbers ( taskinfo , a , b ): return a + b The first argument to any task function is the taskinfo. It is sort of like the celery current_task containing some basic info. Now we can schedule the task: from tasks import add_numbers todo = add_numbers ( 2 , 3 ) # Todo will not be 5 but an *unqueued task* we can schedule # Obtain a task queue queues = AlchemicalQueues ( engine ) queue = queues . get ( \"task-queue\" ) # Schedule the todo action on the queue task = todo . schedule ( queue ) We can wait for the task to finish: import time while not task . result : time . sleep ( 1 ) print ( task . result ) In a separate terminal we can run the worker. Make sure it can import add_numbers by using the same working directory. We will start an alchemical_worker on the same engine and queue as we used in the example. $ alchemical_worker \"sqlite:///test.db\" task-queue After the worker has completed the task the task wait loop will exit, printing 5 .","title":"Tutorial"},{"location":"usage/tutorial/#tutorial","text":"To work with Alchemical Queues you will need a SQLAlchemy Engine which defines the connection to your database. For this tutorial we will use a SQLite database but you can use whatever you already have. from sqlalchemy import create_engine engine = create_engine ( f \"sqlite:///test.db\" ) We can now initialize the Alchemical Queues manager object on this engine. This will initialize some SQLAlchemy metadata on the engine. from alchemical_queues import AlchemicalQueues queues = AlchemicalQueues ( engine ) queues . create_all () If you're used to Flask-SQLAlchemy: queues.create_all is like db.create_all . For the pure SQLAlchemy users, it is like metadata.create_all . It is creating the tables Alchemical Queues uses to store the queues and response data.","title":"Tutorial"},{"location":"usage/tutorial/#queues","text":"The Queues in Alchemical Queues are named and distributed. They are thread and interprocess-safe. By being powered by a database and not something \"smarter\" they are not the fastest, but they are as reliable as the database backend powering them. Let's obtain a named AlchemicalQueue and push some data to it: queue = queues . get ( \"test-queue\" ) queue . put ( 42 ) queue . put ( 137 ) We can now run a second script to read back what we put in: print ( queue . get () . data ) # prints 42 print ( queue . get () . data ) # prints 137 Note that entries are returned in the same order as we put them in. The Queue is a so called FIFO Queue: first-in, first-out. Secondly, note that we access the .data attribute of what is returned, and not the data returned directly. Unlike the standard library queue.Queue the items are not returned as-is but have some additional information. What is returned is a AlchemicalEntry which has several other properties. This entry is also returned when you put something into the queue. entry1 = queue . put ( 12 ) entry2 = queue . get () # entry1 and entry2 represent the same entry What types of data are allowed in a Queue? Data you put in a Queue is serialized to bytes using pickle . Any pickle able datatype is allowed.","title":"Queues"},{"location":"usage/tutorial/#tasks","text":"Implemented on top of AlchemicalQueues is a Task Queue implementation like celery . If you want to have a robust task queue with lots of features I would definitely recommend celery instead. However, alchemical_queues.tasks has the advantage of just needing SQLite to run, thus not requiring any installation of Redis or RabbitMQ or other broker. Running a worker is just another Python script. We first define the task to run as a python function. This task function must be importable by the worker, so for the example put it in a file tasks.py in your working directory. from alchemical_queues.tasks import task @task def add_numbers ( taskinfo , a , b ): return a + b The first argument to any task function is the taskinfo. It is sort of like the celery current_task containing some basic info. Now we can schedule the task: from tasks import add_numbers todo = add_numbers ( 2 , 3 ) # Todo will not be 5 but an *unqueued task* we can schedule # Obtain a task queue queues = AlchemicalQueues ( engine ) queue = queues . get ( \"task-queue\" ) # Schedule the todo action on the queue task = todo . schedule ( queue ) We can wait for the task to finish: import time while not task . result : time . sleep ( 1 ) print ( task . result ) In a separate terminal we can run the worker. Make sure it can import add_numbers by using the same working directory. We will start an alchemical_worker on the same engine and queue as we used in the example. $ alchemical_worker \"sqlite:///test.db\" task-queue After the worker has completed the task the task wait loop will exit, printing 5 .","title":"Tasks"}]}