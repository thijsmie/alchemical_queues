{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Alchemical Queues","text":"<p>Have you got a small web application with a couple users and a database powered by SQLAlchemy? Do you need to run a couple tasks in the background but does it feel like complete overkill to set up a Celery-based system and have to run a broker like Redis or RabbitMQ just for your three automated emails you send per day? Then you are the target audience of Alchemical Queues.</p> <p>Alchemical Queues is a small project that implements safe distributed queues on top of SQLAlchemy. On top of that is an implementation of task queues for which you can run one or more workers. Because it only has one dependency (SQLAlchemy) most likely you are just adding ~300 lines of python to your deployment with no additional external services required.</p>"},{"location":"api/core/AlchemicalEntry/","title":"AlchemicalEntry","text":"<p>         Bases: <code>Generic[T]</code></p> <p>An entry in a queue.</p> <p>Attributes:</p> Name Type Description <code>entry_id</code> <code>int</code> <p>the identifier of the entry. Guaranteed unique per AlchemicalQueues instance.</p> <code>enqueued_at</code> <code>datetime</code> <p>when the entry was added to the queue.</p> <code>schedule_at</code> <code>datetime | None</code> <p>do not remove the entry from the queue before this time.</p> <code>priority</code> <code>int</code> <p>the priority of the entry.</p> <code>data</code> <code>T</code> <p>the data stored in this entry.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>class AlchemicalEntry(Generic[T]):\n\"\"\"An entry in a queue.\n\n    Attributes:\n        entry_id (int): the identifier of the entry. Guaranteed unique per [AlchemicalQueues][alchemical_queues.AlchemicalQueues] instance.\n        enqueued_at (datetime): when the entry was added to the queue.\n        schedule_at (datetime | None): do not remove the entry from the queue before this time.\n        priority (int): the priority of the entry.\n        data (T): the data stored in this entry.\n    \"\"\"\n\n    __slots__ = (\"data\", \"entry_id\", \"enqueued_at\", \"schedule_at\", \"priority\")\n\n    def __init__(\n        self,\n        entry,\n        data: T,\n    ):\n        assert isinstance(entry.entry_id, int)\n\n        self.entry_id: int = entry.entry_id\n        self.enqueued_at: datetime = entry.enqueued_at\n        self.schedule_at: Union[datetime, None] = entry.schedule_at\n        self.priority: int = entry.priority\n        self.data: T = data\n\n    def __repr__(self):\n        return (\n            f\"&lt;{self.__class__.__module__}.{self.__class__.__name__} \"\n            f\"entry_id={self.entry_id} enqueued_at={self.enqueued_at} \"\n            f\"schedule_at={self.schedule_at} priority={self.priority}&gt;\"\n        )\n</code></pre>"},{"location":"api/core/AlchemicalQueue/","title":"AlchemicalQueue","text":"<p>         Bases: <code>Generic[T]</code></p> <p>An Alchemical Queue. It is not intended to be initialized by a user, go through AlchemicalQueues instead.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>class AlchemicalQueue(Generic[T]):\n\"\"\"An Alchemical Queue. It is not intended to be initialized by a user, go through\n    [AlchemicalQueues][alchemical_queues.AlchemicalQueues] instead.\"\"\"\n\n    def __init__(self, engine: Engine, model, response_model, name: str):\n        self._engine = engine\n        self._model = model\n        self._response_model = response_model\n        self._name = name\n        self._session = sessionmaker(\n            engine,\n            autocommit=False,\n            autoflush=False,\n            expire_on_commit=False,\n            future=True,\n        )\n\n    @property\n    def name(self) -&gt; str:\n\"\"\"The name of the queue\"\"\"\n        return self._name\n\n    def put(\n        self,\n        item: T,\n        *,\n        schedule_at: Union[datetime, None] = None,\n        priority: int = 0,\n    ) -&gt; \"AlchemicalEntry[T]\":\n\"\"\"Put an entry into the AlchemicalQueue\n\n        Args:\n            item (Any): The item you wish to add to the queue. It must be pickle-able.\n            schedule_at (datetime | None, optional): Earliest timestamp this entry may be popped of the queue.\n            priority (int, optional): Entry priority. Entries are popped of first in order of priority and then\n                                      in order of adding to the queue.\n\n        Returns:\n            AlchemicalEntry[T]: The resultant queue entry.\n        \"\"\"\n\n        entry = self._model(\n            enqueued_at=datetime.now(),\n            schedule_at=schedule_at,\n            priority=priority,\n            queue_name=self._name,\n            data=pickle.dumps(item),\n        )\n\n        with self._session() as session:\n            session.add(entry)\n            session.commit()\n\n            return AlchemicalEntry(entry, item)\n\n    def get(self) -&gt; Union[\"AlchemicalEntry[T]\", None]:\n\"\"\"Get the highest priority entry out from the queue\n\n        Returns:\n            (AlchemicalEntry | None): The popped entry, or None if the queue is empty (or nothing is scheduled yet)\n        \"\"\"\n\n        timestamp = datetime.now()\n\n        with self._session() as session:\n            item = (\n                session.query(self._model)\n                .with_for_update(of=self._model, skip_locked=True)\n                .filter(\n                    self._model.queue_name == self._name,\n                    or_(\n                        self._model.schedule_at == None,  # pylint: disable=C0121\n                        self._model.schedule_at &lt;= timestamp,  # type: ignore\n                    ),\n                )\n                .order_by(self._model.priority.desc(), self._model.entry_id.asc())  # type: ignore\n                .limit(1)\n                .first()\n            )\n\n            if item is None:\n                session.rollback()\n                return None\n\n            entry = AlchemicalEntry(item, pickle.loads(item.data))\n            session.delete(item)\n            session.commit()\n\n        return entry\n\n    def qsize(self) -&gt; int:\n\"\"\"Return the approximate size of this queue.\n\n        Returns:\n            int: Queue size.\n        \"\"\"\n        with self._session() as session:\n            return (\n                session.query(self._model)\n                .where(self._model.queue_name == self._name)\n                .count()\n            )\n\n    def empty(self) -&gt; bool:\n\"\"\"Return `True` if the Queue is emtpy, `False` otherwise. More efficient than\n        `qsize() &gt; 0`.\n\n        Returns:\n            bool: wether the Queue is empty.\n        \"\"\"\n        with self._session() as session:\n            return (\n                session.query(self._model)\n                .where(self._model.queue_name == self._name)\n                .limit(1)\n                .count()\n                == 0\n            )\n\n    def clear(self) -&gt; None:\n\"\"\"Clear all entries from this queue. Might fail-silent an update call.\"\"\"\n\n        with self._session() as session:\n            session.query(self._model).where(\n                self._model.queue_name == self._name\n            ).delete()\n            session.commit()\n\n    def respond(\n        self, entry_id: int, response: Any, cleanup_at: Union[datetime, None] = None\n    ) -&gt; \"AlchemicalResponse\":\n\"\"\"Send a response to a queue entry. Used to implement task queues.\n\n        Args:\n            entry_id (int): The entry_id you wish to respond to.\n            response (Any): The response data. Must be pickable.\n            cleanup_at (datetime, optional): The optional cleanup timestamp. After this time the response will be removed.\n                                             By default it is not automatically cleaned up.\n\n        Returns:\n            AlchemicalResponse: the response as sent.\n        \"\"\"\n\n        if not isinstance(entry_id, int):\n            raise TypeError(f\"entry_id={entry_id} should be integer\")\n\n        entry = self._response_model(\n            entry_id=entry_id,\n            delivered_at=datetime.now(),\n            cleanup_at=cleanup_at,\n            queue_name=self._name,\n            data=pickle.dumps(response),\n        )\n\n        with self._session() as session:\n            session.add(entry)\n            session.commit()\n\n            return AlchemicalResponse(entry, response)\n\n    def responses(self, entry_id: int) -&gt; List[\"AlchemicalResponse\"]:\n\"\"\"Obtain the response(s) to a specific queue entry.\n\n        Returns:\n            List[AlchemicalResponse]: A list of responses\n        \"\"\"\n        if not isinstance(entry_id, int):\n            raise TypeError(f\"entry_id={entry_id} should be integer\")\n\n        with self._session() as session:\n            now = datetime.now()\n\n            session.query(self._response_model).where(\n                self._response_model.cleanup_at != None,  # pylint: disable=C0121\n                self._response_model.cleanup_at &lt; now,\n            ).delete()\n            entries = (\n                session.query(self._response_model)\n                .where(\n                    self._response_model.queue_name == self._name,\n                    self._response_model.entry_id == entry_id,\n                )\n                .all()\n            )\n            return [AlchemicalResponse(e, pickle.loads(e.data)) for e in entries]\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the queue</p>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.put","title":"<code>put(item, *, schedule_at=None, priority=0)</code>","text":"<p>Put an entry into the AlchemicalQueue</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item you wish to add to the queue. It must be pickle-able.</p> required <code>schedule_at</code> <code>datetime | None</code> <p>Earliest timestamp this entry may be popped of the queue.</p> <code>None</code> <code>priority</code> <code>int</code> <p>Entry priority. Entries are popped of first in order of priority and then                       in order of adding to the queue.</p> <code>0</code> <p>Returns:</p> Type Description <code>AlchemicalEntry[T]</code> <p>AlchemicalEntry[T]: The resultant queue entry.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def put(\n    self,\n    item: T,\n    *,\n    schedule_at: Union[datetime, None] = None,\n    priority: int = 0,\n) -&gt; \"AlchemicalEntry[T]\":\n\"\"\"Put an entry into the AlchemicalQueue\n\n    Args:\n        item (Any): The item you wish to add to the queue. It must be pickle-able.\n        schedule_at (datetime | None, optional): Earliest timestamp this entry may be popped of the queue.\n        priority (int, optional): Entry priority. Entries are popped of first in order of priority and then\n                                  in order of adding to the queue.\n\n    Returns:\n        AlchemicalEntry[T]: The resultant queue entry.\n    \"\"\"\n\n    entry = self._model(\n        enqueued_at=datetime.now(),\n        schedule_at=schedule_at,\n        priority=priority,\n        queue_name=self._name,\n        data=pickle.dumps(item),\n    )\n\n    with self._session() as session:\n        session.add(entry)\n        session.commit()\n\n        return AlchemicalEntry(entry, item)\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.get","title":"<code>get()</code>","text":"<p>Get the highest priority entry out from the queue</p> <p>Returns:</p> Type Description <code>AlchemicalEntry | None</code> <p>The popped entry, or None if the queue is empty (or nothing is scheduled yet)</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def get(self) -&gt; Union[\"AlchemicalEntry[T]\", None]:\n\"\"\"Get the highest priority entry out from the queue\n\n    Returns:\n        (AlchemicalEntry | None): The popped entry, or None if the queue is empty (or nothing is scheduled yet)\n    \"\"\"\n\n    timestamp = datetime.now()\n\n    with self._session() as session:\n        item = (\n            session.query(self._model)\n            .with_for_update(of=self._model, skip_locked=True)\n            .filter(\n                self._model.queue_name == self._name,\n                or_(\n                    self._model.schedule_at == None,  # pylint: disable=C0121\n                    self._model.schedule_at &lt;= timestamp,  # type: ignore\n                ),\n            )\n            .order_by(self._model.priority.desc(), self._model.entry_id.asc())  # type: ignore\n            .limit(1)\n            .first()\n        )\n\n        if item is None:\n            session.rollback()\n            return None\n\n        entry = AlchemicalEntry(item, pickle.loads(item.data))\n        session.delete(item)\n        session.commit()\n\n    return entry\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.qsize","title":"<code>qsize()</code>","text":"<p>Return the approximate size of this queue.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Queue size.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def qsize(self) -&gt; int:\n\"\"\"Return the approximate size of this queue.\n\n    Returns:\n        int: Queue size.\n    \"\"\"\n    with self._session() as session:\n        return (\n            session.query(self._model)\n            .where(self._model.queue_name == self._name)\n            .count()\n        )\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.empty","title":"<code>empty()</code>","text":"<p>Return <code>True</code> if the Queue is emtpy, <code>False</code> otherwise. More efficient than <code>qsize() &gt; 0</code>.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>wether the Queue is empty.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def empty(self) -&gt; bool:\n\"\"\"Return `True` if the Queue is emtpy, `False` otherwise. More efficient than\n    `qsize() &gt; 0`.\n\n    Returns:\n        bool: wether the Queue is empty.\n    \"\"\"\n    with self._session() as session:\n        return (\n            session.query(self._model)\n            .where(self._model.queue_name == self._name)\n            .limit(1)\n            .count()\n            == 0\n        )\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.clear","title":"<code>clear()</code>","text":"<p>Clear all entries from this queue. Might fail-silent an update call.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def clear(self) -&gt; None:\n\"\"\"Clear all entries from this queue. Might fail-silent an update call.\"\"\"\n\n    with self._session() as session:\n        session.query(self._model).where(\n            self._model.queue_name == self._name\n        ).delete()\n        session.commit()\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.respond","title":"<code>respond(entry_id, response, cleanup_at=None)</code>","text":"<p>Send a response to a queue entry. Used to implement task queues.</p> <p>Parameters:</p> Name Type Description Default <code>entry_id</code> <code>int</code> <p>The entry_id you wish to respond to.</p> required <code>response</code> <code>Any</code> <p>The response data. Must be pickable.</p> required <code>cleanup_at</code> <code>datetime</code> <p>The optional cleanup timestamp. After this time the response will be removed.                              By default it is not automatically cleaned up.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AlchemicalResponse</code> <code>AlchemicalResponse</code> <p>the response as sent.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def respond(\n    self, entry_id: int, response: Any, cleanup_at: Union[datetime, None] = None\n) -&gt; \"AlchemicalResponse\":\n\"\"\"Send a response to a queue entry. Used to implement task queues.\n\n    Args:\n        entry_id (int): The entry_id you wish to respond to.\n        response (Any): The response data. Must be pickable.\n        cleanup_at (datetime, optional): The optional cleanup timestamp. After this time the response will be removed.\n                                         By default it is not automatically cleaned up.\n\n    Returns:\n        AlchemicalResponse: the response as sent.\n    \"\"\"\n\n    if not isinstance(entry_id, int):\n        raise TypeError(f\"entry_id={entry_id} should be integer\")\n\n    entry = self._response_model(\n        entry_id=entry_id,\n        delivered_at=datetime.now(),\n        cleanup_at=cleanup_at,\n        queue_name=self._name,\n        data=pickle.dumps(response),\n    )\n\n    with self._session() as session:\n        session.add(entry)\n        session.commit()\n\n        return AlchemicalResponse(entry, response)\n</code></pre>"},{"location":"api/core/AlchemicalQueue/#alchemical_queues.main.AlchemicalQueue.responses","title":"<code>responses(entry_id)</code>","text":"<p>Obtain the response(s) to a specific queue entry.</p> <p>Returns:</p> Type Description <code>List[AlchemicalResponse]</code> <p>List[AlchemicalResponse]: A list of responses</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def responses(self, entry_id: int) -&gt; List[\"AlchemicalResponse\"]:\n\"\"\"Obtain the response(s) to a specific queue entry.\n\n    Returns:\n        List[AlchemicalResponse]: A list of responses\n    \"\"\"\n    if not isinstance(entry_id, int):\n        raise TypeError(f\"entry_id={entry_id} should be integer\")\n\n    with self._session() as session:\n        now = datetime.now()\n\n        session.query(self._response_model).where(\n            self._response_model.cleanup_at != None,  # pylint: disable=C0121\n            self._response_model.cleanup_at &lt; now,\n        ).delete()\n        entries = (\n            session.query(self._response_model)\n            .where(\n                self._response_model.queue_name == self._name,\n                self._response_model.entry_id == entry_id,\n            )\n            .all()\n        )\n        return [AlchemicalResponse(e, pickle.loads(e.data)) for e in entries]\n</code></pre>"},{"location":"api/core/AlchemicalQueues/","title":"AlchemicalQueues","text":"<p>The core entrypoint to Alchemical Queues.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>class AlchemicalQueues:\n\"\"\"The core entrypoint to Alchemical Queues.\"\"\"\n\n    def __init__(\n        self,\n        engine: Union[Engine, None] = None,\n        queue_tablename: str = \"AlchemicalQueue\",\n        response_tablename: str = \"AlchemicalResult\",\n    ) -&gt; None:\n\"\"\"Create the main queue entrypoint object.\n\n        Args:\n            engine (sqlalchemy.engine.Engine | None): The SQLAlchemy engine you want to use. May be left None and initialized later.\n            queue_tablename (str): The name of the table AlchemicalQueues uses for queues.\n            queue_tablename (str): The name of the table AlchemicalQueues uses for task results.\n        \"\"\"\n\n        self._engine = engine\n        self._get_prepped = False\n        self._base, self._qmodel, self._rmodel = _generate_models(\n            queue_tablename, response_tablename\n        )\n        self._queues: Dict[str, \"AlchemicalQueue\"] = {}\n\n    def set_engine(self, engine: Engine) -&gt; None:\n\"\"\"Set the SQLAlchemy engine post-initialization\n\n        Args:\n            engine (sqlalchemy.engine.Engine): The SQLAlchemy engine you want to use.\n\n        Raises:\n            Exception: when the engine was already set.\n        \"\"\"\n\n        if self._engine is not None:\n            raise Exception(\n                \"Cannot set the engine on Alchemical Queues more than once!\"\n            )\n\n        self._engine = engine\n\n    def create_all(self) -&gt; None:\n\"\"\"Create the needed SQLAlchemy table. You would normally call this\n        when you are also creating your own tables, e.g. db.create_all().\"\"\"\n        self._base.metadata.create_all(self._engine)\n\n    def clear(self) -&gt; None:\n\"\"\"Clear all entries from all queues and task results. Might fail-silent an update call.\"\"\"\n\n        with Session(self._engine) as session:\n            session.query(self._qmodel).delete()\n            session.query(self._rmodel).delete()\n            session.commit()\n\n    def _prep_engine_for_get_transaction(self) -&gt; None:\n        if self._get_prepped:\n            return\n\n        if not self._engine:\n            raise Exception(\"AlchemicalQueues SQLAlchemy engine was not initialized.\")\n\n        self._get_prepped = True\n\n        if self._engine.driver == \"pysqlite\":\n\n            @event.listens_for(self._engine, \"begin\")\n            def do_begin(conn):\n                conn.exec_driver_sql(\"BEGIN EXCLUSIVE\")\n\n    def get(self, key: str) -&gt; \"AlchemicalQueue[Any]\":\n\"\"\"Get a Queue instance\n\n        Args:\n            key (str): The name of the queue you wish to access.\n\n        Returns:\n            AlchemicalQueue\n        \"\"\"\n        self._prep_engine_for_get_transaction()\n        assert self._engine\n\n        if key not in self._queues:\n            self._queues[key] = AlchemicalQueue(\n                self._engine, self._qmodel, self._rmodel, key\n            )\n\n        return self._queues[key]\n\n    def get_typed(self, key: str, typeof: Type[T]) -&gt; \"AlchemicalQueue[T]\":\n\"\"\"Get a typed Queue instance\n\n        Args:\n            key (str): The name of the queue you wish to access.\n            typeof (Type[T]): The type of the queue you wish to use\n\n        Returns:\n            AlchemicalQueue[T]\n        \"\"\"\n        # pylint: disable=unused-argument\n        return cast(AlchemicalQueue[T], self.get(key))\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.__init__","title":"<code>__init__(engine=None, queue_tablename='AlchemicalQueue', response_tablename='AlchemicalResult')</code>","text":"<p>Create the main queue entrypoint object.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>sqlalchemy.engine.Engine | None</code> <p>The SQLAlchemy engine you want to use. May be left None and initialized later.</p> <code>None</code> <code>queue_tablename</code> <code>str</code> <p>The name of the table AlchemicalQueues uses for queues.</p> <code>'AlchemicalQueue'</code> <code>queue_tablename</code> <code>str</code> <p>The name of the table AlchemicalQueues uses for task results.</p> <code>'AlchemicalQueue'</code> Source code in <code>alchemical_queues/main.py</code> <pre><code>def __init__(\n    self,\n    engine: Union[Engine, None] = None,\n    queue_tablename: str = \"AlchemicalQueue\",\n    response_tablename: str = \"AlchemicalResult\",\n) -&gt; None:\n\"\"\"Create the main queue entrypoint object.\n\n    Args:\n        engine (sqlalchemy.engine.Engine | None): The SQLAlchemy engine you want to use. May be left None and initialized later.\n        queue_tablename (str): The name of the table AlchemicalQueues uses for queues.\n        queue_tablename (str): The name of the table AlchemicalQueues uses for task results.\n    \"\"\"\n\n    self._engine = engine\n    self._get_prepped = False\n    self._base, self._qmodel, self._rmodel = _generate_models(\n        queue_tablename, response_tablename\n    )\n    self._queues: Dict[str, \"AlchemicalQueue\"] = {}\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.set_engine","title":"<code>set_engine(engine)</code>","text":"<p>Set the SQLAlchemy engine post-initialization</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>sqlalchemy.engine.Engine</code> <p>The SQLAlchemy engine you want to use.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>when the engine was already set.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def set_engine(self, engine: Engine) -&gt; None:\n\"\"\"Set the SQLAlchemy engine post-initialization\n\n    Args:\n        engine (sqlalchemy.engine.Engine): The SQLAlchemy engine you want to use.\n\n    Raises:\n        Exception: when the engine was already set.\n    \"\"\"\n\n    if self._engine is not None:\n        raise Exception(\n            \"Cannot set the engine on Alchemical Queues more than once!\"\n        )\n\n    self._engine = engine\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.create_all","title":"<code>create_all()</code>","text":"<p>Create the needed SQLAlchemy table. You would normally call this when you are also creating your own tables, e.g. db.create_all().</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def create_all(self) -&gt; None:\n\"\"\"Create the needed SQLAlchemy table. You would normally call this\n    when you are also creating your own tables, e.g. db.create_all().\"\"\"\n    self._base.metadata.create_all(self._engine)\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.clear","title":"<code>clear()</code>","text":"<p>Clear all entries from all queues and task results. Might fail-silent an update call.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def clear(self) -&gt; None:\n\"\"\"Clear all entries from all queues and task results. Might fail-silent an update call.\"\"\"\n\n    with Session(self._engine) as session:\n        session.query(self._qmodel).delete()\n        session.query(self._rmodel).delete()\n        session.commit()\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.get","title":"<code>get(key)</code>","text":"<p>Get a Queue instance</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The name of the queue you wish to access.</p> required <p>Returns:</p> Type Description <code>AlchemicalQueue[Any]</code> <p>AlchemicalQueue</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def get(self, key: str) -&gt; \"AlchemicalQueue[Any]\":\n\"\"\"Get a Queue instance\n\n    Args:\n        key (str): The name of the queue you wish to access.\n\n    Returns:\n        AlchemicalQueue\n    \"\"\"\n    self._prep_engine_for_get_transaction()\n    assert self._engine\n\n    if key not in self._queues:\n        self._queues[key] = AlchemicalQueue(\n            self._engine, self._qmodel, self._rmodel, key\n        )\n\n    return self._queues[key]\n</code></pre>"},{"location":"api/core/AlchemicalQueues/#alchemical_queues.main.AlchemicalQueues.get_typed","title":"<code>get_typed(key, typeof)</code>","text":"<p>Get a typed Queue instance</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The name of the queue you wish to access.</p> required <code>typeof</code> <code>Type[T]</code> <p>The type of the queue you wish to use</p> required <p>Returns:</p> Type Description <code>AlchemicalQueue[T]</code> <p>AlchemicalQueue[T]</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>def get_typed(self, key: str, typeof: Type[T]) -&gt; \"AlchemicalQueue[T]\":\n\"\"\"Get a typed Queue instance\n\n    Args:\n        key (str): The name of the queue you wish to access.\n        typeof (Type[T]): The type of the queue you wish to use\n\n    Returns:\n        AlchemicalQueue[T]\n    \"\"\"\n    # pylint: disable=unused-argument\n    return cast(AlchemicalQueue[T], self.get(key))\n</code></pre>"},{"location":"api/core/AlchemicalResponse/","title":"AlchemicalResponse","text":"<p>An response to a queue item. While you can use this as a user, it is probably most useful for the tasks submodule.</p> <p>Attributes:</p> Name Type Description <code>response_id</code> <code>int</code> <p>the identifier of the response.</p> <code>entry_id</code> <code>int</code> <p>the identifier of the associated entry.</p> <code>delivered_at</code> <code>datetime</code> <p>when the response was submitted.</p> <code>cleanup_at</code> <code>datetime | None</code> <p>autoremove this response after this time.</p> <code>data</code> <code>Any</code> <p>Response data.</p> Source code in <code>alchemical_queues/main.py</code> <pre><code>class AlchemicalResponse:\n\"\"\"An response to a queue item. While you can use this as a user, it is probably most useful for the tasks submodule.\n\n    Attributes:\n        response_id (int): the identifier of the response.\n        entry_id (int): the identifier of the associated entry.\n        delivered_at (datetime): when the response was submitted.\n        cleanup_at (datetime | None): autoremove this response after this time.\n        data (Any): Response data.\n    \"\"\"\n\n    __slots__ = [\n        \"data\",\n        \"entry_id\",\n        \"response_id\",\n        \"delivered_at\",\n        \"cleanup_at\",\n    ]\n\n    def __init__(\n        self,\n        response,\n        data: T,\n    ):\n        self.response_id = response.response_id\n        self.entry_id = response.entry_id\n        self.delivered_at = response.delivered_at\n        self.cleanup_at = response.cleanup_at\n        self.data = data\n</code></pre>"},{"location":"api/tasks/QueuedTask/","title":"QueuedTask","text":"<p>         Bases: <code>Generic[RValue]</code></p> <p>Represent a task in the queue.</p> <p>Attributes:</p> Name Type Description <code>entry_id</code> <code>int</code> <p>The id of the entry into the queue that contains the task description.</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>class QueuedTask(Generic[RValue]):\n\"\"\"Represent a task in the queue.\n\n    Attributes:\n        entry_id (int): The id of the entry into the queue that contains the task description.\n    \"\"\"\n\n    def __init__(self, queue: AlchemicalQueue, entry_id: int, name: str):\n        self._queue = queue\n        self.entry_id = entry_id\n        self._name = name\n\n    @property\n    def result(self) -&gt; Union[RValue, TaskException, None]:\n\"\"\"Obtain the result of a queued task if it is finished,\n        an exception if the task failed to run, or None if the task\n        has not completed.\n\n        Returns:\n            RValue: the value you return from the task handler.\n            TaskException: the task failed to execute.\n            None: the task has not completed.\n        \"\"\"\n\n        responses = self._queue.responses(self.entry_id)\n\n        if not responses:\n            return None\n\n        response = responses[0]\n        data: dict = cast(dict, response.data)\n\n        if \"error\" in data:\n            return TaskException(data[\"error\"])\n\n        return cast(RValue, data.get(\"result\"))\n</code></pre>"},{"location":"api/tasks/QueuedTask/#alchemical_queues.tasks.main.QueuedTask.result","title":"<code>result: Union[RValue, TaskException, None]</code>  <code>property</code>","text":"<p>Obtain the result of a queued task if it is finished, an exception if the task failed to run, or None if the task has not completed.</p> <p>Returns:</p> Name Type Description <code>RValue</code> <code>Union[RValue, TaskException, None]</code> <p>the value you return from the task handler.</p> <code>TaskException</code> <code>Union[RValue, TaskException, None]</code> <p>the task failed to execute.</p> <code>None</code> <code>Union[RValue, TaskException, None]</code> <p>the task has not completed.</p>"},{"location":"api/tasks/Task/","title":"Task","text":"<p>         Bases: <code>Generic[Param, RValue]</code></p> <p>Represent a task that is not yet queued to be executed. It is not constructed by the user, but it is returned when calling a task function.</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>class Task(Generic[Param, RValue]):\n\"\"\"Represent a task that is not yet queued to be executed. It is not\n    constructed by the user, but it is returned when calling a task function.\"\"\"\n\n    def __init__(\n        self,\n        handler: Callable[Concatenate[TaskInfo, Param], RValue],\n        *args: Param.args,\n        **kwargs: Param.kwargs,\n    ):\n        self._handler = handler\n        self._args = args\n        self._kwargs = kwargs\n\n    def schedule(\n        self,\n        on_queue: AlchemicalQueue,\n        *,\n        schedule_at: Union[datetime, None] = None,\n        priority: int = 0,\n        max_retries: int = 0,\n        retry_in: Union[timedelta, None] = None,\n    ) -&gt; QueuedTask[RValue]:\n\"\"\"Schedule a task on a queue to be executed.\n\n        Args:\n            on_queue (AlchemicalQueue): the queue used as task queue.\n                                        You are expected to run a worker connected to this queue.\n            schedule_at (datetime, optional): do not run the task before this time.\n            priority (int, optional): the task priority, using normal priority queue semantics.\n            max_retries (int, optional): how many times the task should be retried before reporting failure.\n            retry_in (timedelta, optional): the minimal timespan between two tries.\n        \"\"\"\n\n        name = f\"{self._handler.__module__}.{self._handler.__qualname__}\"\n        entry = on_queue.put(\n            {\n                \"function\": name,\n                \"args\": self._args,\n                \"kwargs\": self._kwargs,\n                \"retries\": 0,\n                \"retry_in\": retry_in,\n                \"max_retries\": max_retries,\n            },\n            schedule_at=schedule_at,\n            priority=priority,\n        )\n        return QueuedTask(queue=on_queue, entry_id=entry.entry_id, name=name)\n</code></pre>"},{"location":"api/tasks/Task/#alchemical_queues.tasks.main.Task.schedule","title":"<code>schedule(on_queue, *, schedule_at=None, priority=0, max_retries=0, retry_in=None)</code>","text":"<p>Schedule a task on a queue to be executed.</p> <p>Parameters:</p> Name Type Description Default <code>on_queue</code> <code>AlchemicalQueue</code> <p>the queue used as task queue.                         You are expected to run a worker connected to this queue.</p> required <code>schedule_at</code> <code>datetime</code> <p>do not run the task before this time.</p> <code>None</code> <code>priority</code> <code>int</code> <p>the task priority, using normal priority queue semantics.</p> <code>0</code> <code>max_retries</code> <code>int</code> <p>how many times the task should be retried before reporting failure.</p> <code>0</code> <code>retry_in</code> <code>timedelta</code> <p>the minimal timespan between two tries.</p> <code>None</code> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>def schedule(\n    self,\n    on_queue: AlchemicalQueue,\n    *,\n    schedule_at: Union[datetime, None] = None,\n    priority: int = 0,\n    max_retries: int = 0,\n    retry_in: Union[timedelta, None] = None,\n) -&gt; QueuedTask[RValue]:\n\"\"\"Schedule a task on a queue to be executed.\n\n    Args:\n        on_queue (AlchemicalQueue): the queue used as task queue.\n                                    You are expected to run a worker connected to this queue.\n        schedule_at (datetime, optional): do not run the task before this time.\n        priority (int, optional): the task priority, using normal priority queue semantics.\n        max_retries (int, optional): how many times the task should be retried before reporting failure.\n        retry_in (timedelta, optional): the minimal timespan between two tries.\n    \"\"\"\n\n    name = f\"{self._handler.__module__}.{self._handler.__qualname__}\"\n    entry = on_queue.put(\n        {\n            \"function\": name,\n            \"args\": self._args,\n            \"kwargs\": self._kwargs,\n            \"retries\": 0,\n            \"retry_in\": retry_in,\n            \"max_retries\": max_retries,\n        },\n        schedule_at=schedule_at,\n        priority=priority,\n    )\n    return QueuedTask(queue=on_queue, entry_id=entry.entry_id, name=name)\n</code></pre>"},{"location":"api/tasks/TaskException/","title":"TaskException","text":"<p>Represent a failed task.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>Stringified exception</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>class TaskException:\n\"\"\"Represent a failed task.\n\n    Attributes:\n        msg (str): Stringified exception\n    \"\"\"\n\n    __slots__ = [\"msg\"]\n\n    def __init__(self, msg: str) -&gt; None:\n        self.msg: str = msg\n</code></pre>"},{"location":"api/tasks/TaskInfo/","title":"TaskInfo","text":"<p>Meta description of the current task, as passed to task worker functions.</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>class TaskInfo:\n\"\"\"Meta description of the current task, as passed to task worker functions.\"\"\"\n\n    __slots__ = [\"entry_id\", \"retries\", \"max_retries\"]\n\n    def __init__(self, entry_id: int, retries: int, max_retries: int) -&gt; None:\n        self.entry_id = entry_id\n        self.retries = retries\n        self.max_retries = max_retries\n</code></pre>"},{"location":"api/tasks/Worker/","title":"Worker","text":"<p>Worker implementation that can take tasks from queues and execute them.</p> <p>Attributes:</p> Name Type Description <code>queue</code> <code>AlchemicalQueue</code> <p>the queue this worker runs on</p> <code>poll_every</code> <code>timedelta</code> <p>how often to poll for new tasks</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>class Worker:\n\"\"\"Worker implementation that can take tasks from queues and execute them.\n\n    Attributes:\n        queue (AlchemicalQueue): the queue this worker runs on\n        poll_every (timedelta): how often to poll for new tasks\n    \"\"\"\n\n    def __init__(\n        self, queue: AlchemicalQueue, poll_every: timedelta = timedelta(seconds=1)\n    ):\n        self.queue = queue\n        self.poll_every: timedelta = poll_every\n        self._handler_registry: Dict[str, \"Tasker\"] = {}\n        self._logger = getLogger(\"alchemical_queues.tasks\")\n\n    def _fail(\n        self,\n        entry_id: int,\n        data: Dict[str, Any],\n        exception: Union[BaseException, None] = None,\n        fatal: bool = False,\n    ):\n        retries = data[\"retries\"]\n\n        if data.get(\"max_retries\", 0) &gt; retries and not fatal:\n            data[\"retries\"] = retries + 1\n\n            retry_at = datetime.now()\n            if data[\"retry_in\"] is not None:\n                retry_at += data[\"retry_in\"]\n\n            data[\"entry_id\"] = entry_id\n            new_entry = self.queue.put(data, schedule_at=retry_at)\n            self._logger.info(\n                \"Retrying failed task %s as `%s`\", entry_id, new_entry.entry_id\n            )\n            return False\n\n        self._logger.warning(\"Failed to perform task %s\", entry_id)\n        self._logger.exception(exception)\n        self.queue.respond(entry_id, {\"error\": str(exception)})\n\n        return False\n\n    def _perform(self, task_entry: AlchemicalEntry):\n        data = task_entry.data\n        entry_id = task_entry.data.get(\"entry_id\") or task_entry.entry_id\n        function_path = data[\"function\"]\n        task_handler = self._handler_registry.get(function_path)\n\n        if function_path not in self._handler_registry:\n            task_handler = self._handler_registry[function_path] = cast(\n                Tasker, locate(function_path)\n            )\n\n        if task_handler is None:\n            return self._fail(\n                entry_id,\n                data,\n                KeyError(\n                    f\"AlchemicalEntry handler `{function_path}` not found.\",\n                ),\n                fatal=True,\n            )\n\n        try:\n            self._logger.info(\"Running task `%s`.\", task_entry.entry_id)\n            func = task_handler.get_handler()\n            result = func(\n                TaskInfo(task_entry.entry_id, data[\"retries\"], data[\"max_retries\"]),\n                *data[\"args\"],\n                **data[\"kwargs\"],\n            )\n            self.queue.respond(entry_id, {\"result\": result})\n            return True\n        except KeyboardInterrupt as interrupt:\n            # Allow cancellation via interrupt signal\n            raise interrupt\n        except Exception as error:  # pylint: disable=broad-except\n            return self._fail(entry_id, data, error)\n\n    def work(self) -&gt; NoReturn:\n\"\"\"Run tasks forever.\"\"\"\n        self._logger.info(\"Worker starting on queue `%s`.\", self.queue.name)\n\n        while True:\n            task_entry = self.queue.get()\n\n            if task_entry is None:\n                time.sleep(self.poll_every.total_seconds())\n            else:\n                self._perform(task_entry)\n\n    def work_one(self, block: bool = True) -&gt; None:\n\"\"\"Run exactly one task.\n\n        Args:\n            block (bool): wether to block until a task is available, or exit immediately if not is available.\n        \"\"\"\n\n        while True:\n            task_entry = self.queue.get()\n\n            if task_entry is not None:\n                self._perform(task_entry)\n                return\n\n            if block:\n                time.sleep(self.poll_every.total_seconds())\n            else:\n                break\n</code></pre>"},{"location":"api/tasks/Worker/#alchemical_queues.tasks.main.Worker.work","title":"<code>work()</code>","text":"<p>Run tasks forever.</p> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>def work(self) -&gt; NoReturn:\n\"\"\"Run tasks forever.\"\"\"\n    self._logger.info(\"Worker starting on queue `%s`.\", self.queue.name)\n\n    while True:\n        task_entry = self.queue.get()\n\n        if task_entry is None:\n            time.sleep(self.poll_every.total_seconds())\n        else:\n            self._perform(task_entry)\n</code></pre>"},{"location":"api/tasks/Worker/#alchemical_queues.tasks.main.Worker.work_one","title":"<code>work_one(block=True)</code>","text":"<p>Run exactly one task.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>bool</code> <p>wether to block until a task is available, or exit immediately if not is available.</p> <code>True</code> Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>def work_one(self, block: bool = True) -&gt; None:\n\"\"\"Run exactly one task.\n\n    Args:\n        block (bool): wether to block until a task is available, or exit immediately if not is available.\n    \"\"\"\n\n    while True:\n        task_entry = self.queue.get()\n\n        if task_entry is not None:\n            self._perform(task_entry)\n            return\n\n        if block:\n            time.sleep(self.poll_every.total_seconds())\n        else:\n            break\n</code></pre>"},{"location":"api/tasks/task/","title":"task","text":"<p>Decorator to turn a function into a runnable task.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable</code> <p>Any function you want to run as task. It should take a TaskInfo                  as first argument.</p> required Source code in <code>alchemical_queues/tasks/main.py</code> <pre><code>def task(\n    function: Callable[Concatenate[TaskInfo, Param], RValue]\n) -&gt; Tasker[Param, RValue]:\n\"\"\"Decorator to turn a function into a runnable task.\n\n    Args:\n        function (Callable): Any function you want to run as task. It should take a [TaskInfo][alchemical_queues.tasks.TaskInfo]\n                             as first argument.\"\"\"\n\n    return Tasker[Param, RValue](function)\n</code></pre>"},{"location":"development/contributing/","title":"Contributing","text":""},{"location":"development/contributing/#contributing-to-alchemical-queues","title":"Contributing to Alchemical Queues","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's readme - Mention the project at local meetups and tell your friends/colleagues</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute</li> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution<ul> <li>Format your code with <code>black</code></li> <li>Rate your code style using <code>pylint</code></li> <li>Type-check your code with <code>mypy</code></li> <li>Run the testsuite with <code>pytest</code></li> </ul> </li> <li>Attribution</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the Alchemical Queues Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to open-source@tmiedema.com.</p>"},{"location":"development/contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"development/contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"development/contributing/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license (MIT).</p>"},{"location":"development/contributing/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"development/contributing/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug:</li> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul>"},{"location":"development/contributing/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to open-source@tmiedema.com.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"development/contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for Alchemical Queues, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"development/contributing/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"development/contributing/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>Explain why this enhancement would be useful to most Alchemical Queues users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"development/contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>So you've decided to contribute some code to Alchemical Queues! Here a couple quick steps to get your environment up and running.</p> <p>The environment used for Alchemical Queues is managed by <code>poetry</code>, a very useful tool that makes setting up the same environment every time a breeze. Install it easily via pip:</p> <pre><code>$ pip install poetry\n</code></pre> <p>Now you can clone the github repository (maybe make a fork first) and install the dependencies.</p> <pre><code>$ git clone https://github.com/thijsmie/alchemical_queues\n$ cd alchemical_queues\n$ poetry install\n</code></pre> <p>You can now make a change somewhere. For the sake of argument, lets just say you add a quick <code>print(\"Hi!\")</code> somewhere in the code. Before you contribute this change back to the project you'll need to perform a couple steps:</p>"},{"location":"development/contributing/#format-your-code-with-black","title":"Format your code with <code>black</code>","text":"<p>Alchemical Queues is formatted using <code>black</code>, a zero-config code formatter. Run it like so:</p> <pre><code>$ poetry run black src/\n</code></pre>"},{"location":"development/contributing/#rate-your-code-style-using-pylint","title":"Rate your code style using <code>pylint</code>","text":"<p>To make sure there aren't any unused imports, non-descriptive variable names or other such \"code smells\" you can run <code>pylint</code>.</p> <pre><code>$ poetry run pylint src/alchemical_queues/\n</code></pre> <p>Preferably, the rating should stay '10.0', unless there is a compelling reason not to.</p>"},{"location":"development/contributing/#type-check-your-code-with-mypy","title":"Type-check your code with <code>mypy</code>","text":"<p>Type hints are an important way to communicate to the user how the Alchemical Queues API works. Use <code>mypy</code> to check it:</p> <pre><code>$ poetry run mypy .\n</code></pre>"},{"location":"development/contributing/#run-the-testsuite-with-pytest","title":"Run the testsuite with <code>pytest</code>","text":"<p>Testing is important, and it helps you to not accidentally break the code. We test using <code>pytest</code>. It also gives some feedback on coverage, which counts how many lines of your code are actually tested.</p> <pre><code>$ poetry run pytest --cov=src .\n$ poetry run coverage report\n</code></pre>"},{"location":"development/contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"development/postgres/","title":"Testing against Postgres","text":"<p>Running against postgres locally with a postgres docker</p> <pre><code>docker run --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=aq_db -p 5455:5432 postgres:latest\nexport postgres_ip=`docker inspect -f '\\{\\{range.NetworkSettings.Networks\\}\\}\\{\\{.IPAddress\\}\\}\\{\\{end\\}\\}' postgres`\npytest -x --engine \"postgresql+psycopg2://postgres:postgres@${postgres_ip}/aq_db\"\n</code></pre>"},{"location":"usage/advanced/","title":"Extra functionality","text":"<p>Alchemical Queues has a couple extra functionalities that you can combine to build your system.</p>"},{"location":"usage/advanced/#priority-queues","title":"Priority queues","text":"<p>In reality, all Alchemical Queues are priority queues, just all normal items you insert have priority 0.</p> <pre><code>queue = queues.get(\"priority-queue\")\nqueue.put(42, priority=12)\nqueue.put(137, priority=13)\nqueue.put(0)\n\nprint(queue.get().data)  # prints 137\nprint(queue.get().data)  # prints 42\nprint(queue.get().data)  # prints 0\n</code></pre> <p>This argument also applies to the <code>schedule</code> method for tasks.</p> <pre><code>add_numbers(1,2).schedule(queue, priority=12)\n</code></pre>"},{"location":"usage/advanced/#scheduling","title":"Scheduling","text":"<p>When putting things into the queue you can pass a <code>schedule_at</code> argument. These entries can not be popped off the queue before the <code>schedule_at</code> time.</p> <pre><code>import time\nfrom datetime import datetime, timedelta\n\nnow = datetime.now()\nqueue = queues.get(\"schedule-queue\")\nqueue.put(42, schedule_at=now+timedelta(seconds=1))\n\nprint(queue.get())  # will print None\n\ntime.sleep(1.0)\n\nprint(queue.get().data)  # will print 42\n</code></pre> <p>This argument also applies to the <code>schedule</code> method for tasks.</p> <pre><code>add_numbers(1,2).schedule(queue, schedule_at=now+timedelta(seconds=30))\n</code></pre>"},{"location":"usage/advanced/#custom-tables","title":"Custom tables","text":"<p>If you don't want to use the default <code>AlchemicalQueue</code> and <code>AlchemicalResponse</code> tables you can configure them.</p> <pre><code>queues = AlchemicalQueues(\n    queue_tablename=\"queues\",\n    response_tablename=\"responses\"\n)\n</code></pre> <p>When you use <code>alchemical_worker</code> it will use the default names. You can run the worker via python on your custom queues.</p> <pre><code>from alchemical_queues.tasks import Worker\n\nWorker(queues.get(\"task-queue\")).work()\n</code></pre>"},{"location":"usage/flask_example/","title":"Flask-SQLAlchemy example","text":"<p>This is a quick example of how to use <code>alchemical_queues.tasks</code> in a Flask context. We'll use the file <code>tasks.py</code> from the main tutorial:</p> <pre><code>from alchemical_queues.tasks import task\n\n@task\ndef add_numbers(taskinfo, a, b):\n    print(f\"Running {a}+{b}\")\n    return a + b\n</code></pre> <p>The minimal Flask app looks like this:</p> <pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom alchemical_queues import AlchemicalQueues\nfrom tasks import add_numbers\n\n\ndb = SQLAlchemy()\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///project.db\"\ndb.init_app(app)\n\nqueues = AlchemicalQueues()\n\nwith app.app_context():\n    db.create_all()\n    queues.set_engine(db.engine)\n    queues.create_all()\n\n\n@app.route(\"/&lt;int:a&gt;/&lt;int:b&gt;\")\ndef add_some_numbers(a: int, b: int):\n    task_queue = queues.get(\"task-queue\")\n    entry = add_numbers(a, b).schedule(task_queue)\n    return f\"task: {entry.entry_id}\"\n\n\n@app.route(\"/result/&lt;int:entry&gt;\")\ndef result(entry: int):\n    task_queue = queues.get(\"task-queue\")\n    task = add_numbers.retrieve(task_queue, entry)\n\n    if task.result is None:\n        return \"No result yet\"\n    else:\n        return f\"result: {task.result}\"\n\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>The worker can be run like this:</p> <pre><code>alchemical_worker \"sqlite:///project.db\" task-queue\n</code></pre>"},{"location":"usage/installation/","title":"Installation","text":"<p>You can install Alchemical Queues using pip:</p> <pre><code>pip install alchemical-queues\n</code></pre> <p>You can also install from source: <pre><code>git clone https://github.com/thijsmie/alchemical_queues\ncd alchemical_queues\npip install .\n</code></pre></p> <p>You can also use poetry to set up your development environment and run the tests: <pre><code>git clone https://github.com/thijsmie/alchemical_queues\ncd alchemical_queues\npip install poetry\npoetry install\npoetry run pytest\n</code></pre></p>"},{"location":"usage/tutorial/","title":"Tutorial","text":"<p>To work with Alchemical Queues you will need a SQLAlchemy Engine which defines the connection to your database. For this tutorial we will use a SQLite database but you can use whatever you already have.</p> <pre><code>from sqlalchemy import create_engine\n\nengine = create_engine(f\"sqlite:///test.db\")\n</code></pre> <p>We can now initialize the Alchemical Queues manager object on this engine. This will initialize some SQLAlchemy metadata on the engine.</p> <pre><code>from alchemical_queues import AlchemicalQueues\n\nqueues = AlchemicalQueues(engine)\nqueues.create_all()\n</code></pre> <p>If you're used to Flask-SQLAlchemy: <code>queues.create_all</code> is like <code>db.create_all</code>. For the pure SQLAlchemy users, it is like <code>metadata.create_all</code>. It is creating the tables Alchemical Queues uses to store the queues and response data.</p>"},{"location":"usage/tutorial/#queues","title":"Queues","text":"<p>The Queues in Alchemical Queues are named and distributed. They are thread and interprocess-safe. By being powered by a database and not something \"smarter\" they are not the fastest, but they are as reliable as the database backend powering them.</p> <p>Let's obtain a named <code>AlchemicalQueue</code> and push some data to it:</p> <pre><code>queue = queues.get(\"test-queue\")\nqueue.put(42)\nqueue.put(137)\n</code></pre> <p>We can now run a second script to read back what we put in:</p> <pre><code>print(queue.get().data)  # prints 42\nprint(queue.get().data)  # prints 137\n</code></pre> <p>Note that entries are returned in the same order as we put them in. The Queue is a so called FIFO Queue: first-in, first-out. Secondly, note that we access the <code>.data</code> attribute of what is returned, and not the data returned directly. Unlike the standard library <code>queue.Queue</code> the items are not returned as-is but have some additional information. What is returned is a <code>AlchemicalEntry</code> which has several other properties. This entry is also returned when you <code>put</code> something into the queue.</p> <pre><code>entry1 = queue.put(12)\nentry2 = queue.get()\n\n# entry1 and entry2 represent the same entry\n</code></pre> <p>What types of data are allowed in a Queue?</p> <p>Data you put in a Queue is serialized to <code>bytes</code> using <code>pickle</code>. Any <code>pickle</code>able datatype is allowed.</p>"},{"location":"usage/tutorial/#tasks","title":"Tasks","text":"<p>Implemented on top of <code>AlchemicalQueues</code> is a Task Queue implementation like celery. If you want to have a robust task queue with lots of features I would definitely recommend celery instead. However, <code>alchemical_queues.tasks</code> has the advantage of just needing <code>SQLite</code> to run, thus not requiring any installation of Redis or RabbitMQ or other broker. Running a worker is just another Python script.</p> <p>We first define the task to run as a python function. This task function must be importable by the worker, so for the example put it in a file <code>tasks.py</code> in your working directory.</p> <pre><code>from alchemical_queues.tasks import task\n\n@task\ndef add_numbers(taskinfo, a, b):\n    return a + b\n</code></pre> <p>The first argument to any task function is the taskinfo. It is sort of like the celery <code>current_task</code> containing some basic info. Now we can schedule the task:</p> <pre><code>from tasks import add_numbers\n\ntodo = add_numbers(2, 3)\n# Todo will not be 5 but an *unqueued task* we can schedule\n\n# Obtain a task queue\nqueues = AlchemicalQueues(engine)\nqueue = queues.get(\"task-queue\")\n\n# Schedule the todo action on the queue\ntask = todo.schedule(queue)\n</code></pre> <p>We can wait for the task to finish:</p> <pre><code>import time\nwhile not task.result:\n    time.sleep(1)\nprint(task.result)\n</code></pre> <p>In a separate terminal we can run the worker. Make sure it can import <code>add_numbers</code> by using the same working directory. We will start an <code>alchemical_worker</code> on the same engine and queue as we used in the example.</p> <pre><code>$ alchemical_worker \"sqlite:///test.db\" task-queue\n</code></pre> <p>After the worker has completed the task the task wait loop will exit, printing <code>5</code>.</p>"}]}